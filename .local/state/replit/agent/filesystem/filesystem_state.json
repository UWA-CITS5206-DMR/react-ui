{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Digital Medical Records Simulation Platform\n\n## Overview\n\nThis project is a comprehensive medical education simulation platform that replicates a digital medical records system. The application provides an immersive learning environment where students can practice clinical decision-making in simulated emergency department scenarios. The platform supports four distinct user roles: System Administrator, Simulation Coordinator, Instructor, and Student, each with specialized functionality and access controls.\n\nThe system simulates realistic patient encounters with dynamic vital signs, laboratory results, medical histories, and the ability to write SOAP notes and place medical orders. The platform creates an authentic clinical experience without the risks associated with real patient care, enhanced by advanced features like data versioning, document management, and comprehensive audit trails.\n\n## Recent Updates (January 2025)\n\n- **Complete Four-Role Implementation**: Successfully implemented System Administrator and Simulation Coordinator roles alongside existing Student and Instructor functionality\n- **Advanced Data Management**: Added data versioning system for group-specific patient data isolation\n- **Document Management System**: Implemented coordinator-controlled document upload, scheduling, and release functionality  \n- **Comprehensive API Layer**: Extended backend with full CRUD operations for all new features\n- **Enhanced Security**: Added audit logging and role-based access control for all system operations\n- **Production-Ready Architecture**: Fixed API integration issues and ensured stable operation across all user roles\n- **Complete Documentation Suite**: Created comprehensive technical and product architecture documentation in `docs/` directory\n  - Technical architecture with detailed frontend/backend implementation\n  - Product architecture covering user roles and feature specifications\n  - User guides and platform documentation in Chinese\n  - Centralized documentation index for easy navigation\n- **Group-Level Data Isolation**: Implemented comprehensive data isolation architecture (January 8, 2025)\n  - Added middleware for group access control and patient data validation\n  - SOAP notes and medical orders now filtered by group membership\n  - Patients assigned to groups through data version system\n  - Complete documentation of isolation mechanisms in `docs/data-isolation-architecture.md`\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\nThe client is built using React with TypeScript, leveraging modern development patterns including:\n- **Component-based architecture** using functional components with hooks\n- **State management** through React Context for authentication and React Query for server state\n- **UI component library** based on Radix UI primitives with shadcn/ui styling\n- **Routing** handled by Wouter for lightweight client-side navigation\n- **Styling** implemented with Tailwind CSS for utility-first responsive design\n- **Build system** powered by Vite for fast development and optimized production builds\n\n### Backend Architecture\nThe server follows a RESTful API design using Express.js with TypeScript:\n- **Route-based organization** with centralized route registration\n- **Middleware pipeline** for request logging, JSON parsing, and error handling\n- **Storage abstraction layer** providing a clean interface for data operations\n- **Session-based authentication** with simple credential verification\n- **Development tooling** integrated with Vite for hot module replacement in development\n\n### Data Storage Solutions\nThe application uses a PostgreSQL database accessed through Drizzle ORM:\n- **Schema-first approach** with type-safe database operations\n- **Migration management** through Drizzle Kit for database evolution\n- **Connection pooling** via Neon serverless PostgreSQL for scalability\n- **Shared schema types** between client and server for type consistency\n- **Validation layer** using Zod schemas derived from database models\n\n### Authentication and Authorization\nSimple role-based authentication system:\n- **Username/password authentication** with plaintext storage (suitable for educational environments)\n- **Role-based access control** distinguishing between student and instructor capabilities\n- **Session persistence** using localStorage for client-side session management\n- **Route protection** based on authentication status and user roles\n\n### Key Domain Models\nThe database schema supports comprehensive medical record simulation:\n- **User management** with role-based permissions for students and instructors\n- **Session orchestration** allowing instructors to manage multiple concurrent scenarios\n- **Patient records** with complete demographic and clinical information\n- **Vital signs tracking** with historical data and real-time updates\n- **Laboratory results** with instructor-controlled release timing\n- **SOAP notes** for structured clinical documentation\n- **Medical orders** for tracking student clinical decisions\n- **Medical history and medications** for comprehensive patient profiles\n\n### Real-time Features\nThe system supports dynamic scenario management:\n- **Instructor controls** for real-time patient condition updates\n- **Laboratory result release** allowing instructors to simulate lab timing\n- **Session monitoring** with participant tracking and time management\n- **Notification system** for important clinical updates and alerts\n\n## External Dependencies\n\n### Database and ORM\n- **Neon PostgreSQL** - Serverless PostgreSQL database for scalable data storage\n- **Drizzle ORM** - Type-safe database toolkit with excellent TypeScript integration\n- **Drizzle Kit** - Database migration and schema management tools\n\n### UI and Styling\n- **Radix UI** - Comprehensive set of accessible component primitives\n- **shadcn/ui** - Pre-built component library with consistent design patterns\n- **Tailwind CSS** - Utility-first CSS framework for responsive design\n- **Lucide React** - Icon library providing medical and general purpose icons\n\n### State Management and API\n- **TanStack React Query** - Server state management with caching and synchronization\n- **React Hook Form** - Form handling with validation and error management\n- **Zod** - Runtime type validation and schema definition\n\n### Development Tools\n- **Vite** - Build tool providing fast development server and optimized builds\n- **TypeScript** - Static type checking for enhanced development experience\n- **ESBuild** - Fast JavaScript bundler for production builds\n- **Wouter** - Lightweight routing library for client-side navigation\n\n### Runtime and Utilities\n- **Express.js** - Web application framework for the REST API server\n- **tsx** - TypeScript execution environment for development\n- **date-fns** - Date manipulation utilities for handling timestamps\n- **class-variance-authority** - Utility for building variant-based component APIs\n- **clsx** - Conditional className utility for dynamic styling","size_bytes":7056},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        \"hospital-blue\": \"#005EB8\",\n        \"success-green\": \"#7FBA00\",\n        \"alert-yellow\": \"#FBC02D\",\n        \"critical-red\": \"#D32F2F\",\n        \"bg-light\": \"#F4F4F4\",\n      },\n      fontFamily: {\n        sans: [\"Inter\", \"sans-serif\"],\n        serif: [\"Georgia\", \"serif\"],\n        mono: [\"Menlo\", \"monospace\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2508},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { \n  groupAccessMiddleware, \n  patientAccessMiddleware, \n  groupDataIsolationMiddleware \n} from \"./groupMiddleware\";\nimport { \n  insertSoapNoteSchema, \n  insertOrderSchema, \n  insertLabResultSchema,\n  insertGroupSchema,\n  insertGroupMemberSchema,\n  insertAssetSchema\n} from \"@shared/schema\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Authentication\n  app.post(\"/api/auth/login\", async (req, res) => {\n    try {\n      const { username, password } = req.body;\n      const user = await storage.getUserByUsername(username);\n      \n      if (!user || user.password !== password) {\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n\n      // Remove password from response\n      const { password: _, ...userWithoutPassword } = user;\n      res.json({ user: userWithoutPassword });\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Get current user sessions\n  app.get(\"/api/sessions/instructor/:instructorId\", async (req, res) => {\n    try {\n      const { instructorId } = req.params;\n      const sessions = await storage.getActiveSessionsByInstructor(instructorId);\n      res.json(sessions);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch sessions\" });\n    }\n  });\n\n  // Get session details\n  app.get(\"/api/sessions/:sessionId\", async (req, res) => {\n    try {\n      const { sessionId } = req.params;\n      const session = await storage.getSession(sessionId);\n      \n      if (!session) {\n        return res.status(404).json({ message: \"Session not found\" });\n      }\n\n      res.json(session);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch session\" });\n    }\n  });\n\n  // Get patients in session\n  app.get(\"/api/sessions/:sessionId/patients\", async (req, res) => {\n    try {\n      const { sessionId } = req.params;\n      const patients = await storage.getPatientsBySession(sessionId);\n      res.json(patients);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch patients\" });\n    }\n  });\n\n  // Get patient details\n  app.get(\"/api/patients/:patientId\", async (req, res) => {\n    try {\n      const { patientId } = req.params;\n      const patient = await storage.getPatient(patientId);\n      \n      if (!patient) {\n        return res.status(404).json({ message: \"Patient not found\" });\n      }\n\n      res.json(patient);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch patient\" });\n    }\n  });\n\n  // Get patient vitals\n  app.get(\"/api/patients/:patientId/vitals\", async (req, res) => {\n    try {\n      const { patientId } = req.params;\n      const vitals = await storage.getLatestVitals(patientId);\n      res.json(vitals);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch vitals\" });\n    }\n  });\n\n  // Get patient lab results\n  app.get(\"/api/patients/:patientId/labs\", async (req, res) => {\n    try {\n      const { patientId } = req.params;\n      const labs = await storage.getLabResults(patientId);\n      res.json(labs);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch lab results\" });\n    }\n  });\n\n  // Get patient medical history\n  app.get(\"/api/patients/:patientId/history\", async (req, res) => {\n    try {\n      const { patientId } = req.params;\n      const history = await storage.getMedicalHistory(patientId);\n      res.json(history);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch medical history\" });\n    }\n  });\n\n  // Get patient medications\n  app.get(\"/api/patients/:patientId/medications\", async (req, res) => {\n    try {\n      const { patientId } = req.params;\n      const medications = await storage.getMedications(patientId);\n      res.json(medications);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch medications\" });\n    }\n  });\n\n  // Get patient SOAP notes\n  app.get(\"/api/patients/:patientId/soap-notes\", async (req, res) => {\n    try {\n      const { patientId } = req.params;\n      const notes = await storage.getSoapNotes(patientId);\n      res.json(notes);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch SOAP notes\" });\n    }\n  });\n\n  // Create SOAP note\n  app.post(\"/api/patients/:patientId/soap-notes\", async (req, res) => {\n    try {\n      const { patientId } = req.params;\n      const noteData = insertSoapNoteSchema.parse({\n        ...req.body,\n        patientId,\n      });\n      \n      const soapNote = await storage.createSoapNote(noteData);\n      res.status(201).json(soapNote);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid SOAP note data\" });\n    }\n  });\n\n  // Get patient orders\n  app.get(\"/api/patients/:patientId/orders\", async (req, res) => {\n    try {\n      const { patientId } = req.params;\n      const orders = await storage.getOrders(patientId);\n      res.json(orders);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch orders\" });\n    }\n  });\n\n  // Create order\n  app.post(\"/api/patients/:patientId/orders\", async (req, res) => {\n    try {\n      const { patientId } = req.params;\n      const orderData = insertOrderSchema.parse({\n        ...req.body,\n        patientId,\n      });\n      \n      const order = await storage.createOrder(orderData);\n      res.status(201).json(order);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid order data\" });\n    }\n  });\n\n  // Instructor: Update lab result (release results)\n  app.patch(\"/api/lab-results/:labId\", async (req, res) => {\n    try {\n      const { labId } = req.params;\n      const updates = req.body;\n      \n      const labResult = await storage.updateLabResult(labId, {\n        ...updates,\n        completedAt: updates.status === 'completed' ? new Date() : null,\n      });\n      \n      if (!labResult) {\n        return res.status(404).json({ message: \"Lab result not found\" });\n      }\n\n      res.json(labResult);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update lab result\" });\n    }\n  });\n\n  // Instructor: Update patient status\n  app.patch(\"/api/patients/:patientId\", async (req, res) => {\n    try {\n      const { patientId } = req.params;\n      const updates = req.body;\n      \n      const patient = await storage.updatePatient(patientId, updates);\n      \n      if (!patient) {\n        return res.status(404).json({ message: \"Patient not found\" });\n      }\n\n      res.json(patient);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update patient\" });\n    }\n  });\n\n  // Groups routes\n  app.get(\"/api/sessions/:sessionId/groups\", async (req, res) => {\n    try {\n      const groups = await storage.getGroupsBySession(req.params.sessionId);\n      res.json(groups);\n    } catch (error) {\n      console.error(\"Error fetching groups:\", error);\n      res.status(500).json({ error: \"Failed to fetch groups\" });\n    }\n  });\n\n  app.post(\"/api/sessions/:sessionId/groups\", async (req, res) => {\n    try {\n      const groupData = insertGroupSchema.parse({\n        ...req.body,\n        sessionId: req.params.sessionId,\n      });\n      const group = await storage.createGroup(groupData);\n      res.status(201).json(group);\n    } catch (error) {\n      console.error(\"Error creating group:\", error);\n      res.status(400).json({ error: \"Failed to create group\" });\n    }\n  });\n\n  app.get(\"/api/groups/:groupId/members\", async (req, res) => {\n    try {\n      const members = await storage.getGroupMembers(req.params.groupId);\n      res.json(members);\n    } catch (error) {\n      console.error(\"Error fetching group members:\", error);\n      res.status(500).json({ error: \"Failed to fetch group members\" });\n    }\n  });\n\n  app.post(\"/api/groups/:groupId/members\", async (req, res) => {\n    try {\n      const memberData = insertGroupMemberSchema.parse({\n        ...req.body,\n        groupId: req.params.groupId,\n      });\n      const member = await storage.addGroupMember(memberData);\n      res.status(201).json(member);\n    } catch (error) {\n      console.error(\"Error adding group member:\", error);\n      res.status(400).json({ error: \"Failed to add group member\" });\n    }\n  });\n\n  // User groups route\n  app.get(\"/api/users/:userId/groups\", async (req, res) => {\n    try {\n      const groups = await storage.getUserGroups(req.params.userId);\n      res.json(groups);\n    } catch (error) {\n      console.error(\"Error fetching user groups:\", error);\n      res.status(500).json({ error: \"Failed to fetch user groups\" });\n    }\n  });\n\n  // Assets routes\n  app.get(\"/api/sessions/:sessionId/assets\", async (req, res) => {\n    try {\n      const assets = await storage.getAssetsBySession(req.params.sessionId);\n      res.json(assets);\n    } catch (error) {\n      console.error(\"Error fetching assets:\", error);\n      res.status(500).json({ error: \"Failed to fetch assets\" });\n    }\n  });\n\n  app.post(\"/api/sessions/:sessionId/assets\", async (req, res) => {\n    try {\n      const assetData = insertAssetSchema.parse({\n        ...req.body,\n        sessionId: req.params.sessionId,\n      });\n      const asset = await storage.createAsset(assetData);\n      res.status(201).json(asset);\n    } catch (error) {\n      console.error(\"Error creating asset:\", error);\n      res.status(400).json({ error: \"Failed to create asset\" });\n    }\n  });\n\n  app.delete(\"/api/assets/:assetId\", async (req, res) => {\n    try {\n      await storage.deleteAsset(req.params.assetId);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting asset:\", error);\n      res.status(500).json({ error: \"Failed to delete asset\" });\n    }\n  });\n\n  // Asset visibility routes\n  app.get(\"/api/groups/:groupId/visible-assets\", async (req, res) => {\n    try {\n      const assets = await storage.getVisibleAssetsForGroup(req.params.groupId);\n      res.json(assets);\n    } catch (error) {\n      console.error(\"Error fetching visible assets:\", error);\n      res.status(500).json({ error: \"Failed to fetch visible assets\" });\n    }\n  });\n\n  app.put(\"/api/assets/:assetId/visibility/:groupId\", async (req, res) => {\n    try {\n      const { visible, changedBy } = req.body;\n      const visibility = await storage.updateAssetVisibility(\n        req.params.assetId,\n        req.params.groupId,\n        visible,\n        changedBy\n      );\n      res.json(visibility);\n    } catch (error) {\n      console.error(\"Error updating asset visibility:\", error);\n      res.status(500).json({ error: \"Failed to update asset visibility\" });\n    }\n  });\n\n  app.put(\"/api/assets/bulk-visibility/:groupId\", async (req, res) => {\n    try {\n      const { assetIds, visible, changedBy } = req.body;\n      await storage.bulkUpdateAssetVisibility(assetIds, req.params.groupId, visible, changedBy);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error bulk updating asset visibility:\", error);\n      res.status(500).json({ error: \"Failed to bulk update asset visibility\" });\n    }\n  });\n\n  app.get(\"/api/assets/:assetId/visibility/:groupId\", async (req, res) => {\n    try {\n      const visibility = await storage.getAssetVisibility(req.params.assetId, req.params.groupId);\n      res.json(visibility);\n    } catch (error) {\n      console.error(\"Error fetching asset visibility:\", error);\n      res.status(500).json({ error: \"Failed to fetch asset visibility\" });\n    }\n  });\n\n  // System Admin Routes\n  app.get(\"/api/admin/users\", async (req, res) => {\n    try {\n      const users = await storage.getAllUsers();\n      res.json(users);\n    } catch (error) {\n      console.error(\"Error fetching users:\", error);\n      res.status(500).json({ error: \"Failed to fetch users\" });\n    }\n  });\n\n  app.post(\"/api/admin/users\", async (req, res) => {\n    try {\n      const user = await storage.createUser(req.body);\n      res.status(201).json(user);\n    } catch (error) {\n      console.error(\"Error creating user:\", error);\n      res.status(500).json({ error: \"Failed to create user\" });\n    }\n  });\n\n  app.put(\"/api/admin/users/:id\", async (req, res) => {\n    try {\n      const user = await storage.updateUser(req.params.id, req.body);\n      if (!user) {\n        return res.status(404).json({ error: \"User not found\" });\n      }\n      res.json(user);\n    } catch (error) {\n      console.error(\"Error updating user:\", error);\n      res.status(500).json({ error: \"Failed to update user\" });\n    }\n  });\n\n  app.delete(\"/api/admin/users/:id\", async (req, res) => {\n    try {\n      await storage.deleteUser(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting user:\", error);\n      res.status(500).json({ error: \"Failed to delete user\" });\n    }\n  });\n\n  app.get(\"/api/admin/data-versions\", async (req, res) => {\n    try {\n      const sessionId = req.query.sessionId as string || \"session-1\";\n      const versions = await storage.getDataVersions(sessionId);\n      res.json(versions);\n    } catch (error) {\n      console.error(\"Error fetching data versions:\", error);\n      res.status(500).json({ error: \"Failed to fetch data versions\" });\n    }\n  });\n\n  app.post(\"/api/admin/data-versions\", async (req, res) => {\n    try {\n      const version = await storage.createDataVersion(req.body);\n      res.status(201).json(version);\n    } catch (error) {\n      console.error(\"Error creating data version:\", error);\n      res.status(500).json({ error: \"Failed to create data version\" });\n    }\n  });\n\n  app.delete(\"/api/admin/data-versions/:id\", async (req, res) => {\n    try {\n      await storage.deleteDataVersion(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting data version:\", error);\n      res.status(500).json({ error: \"Failed to delete data version\" });\n    }\n  });\n\n  app.get(\"/api/admin/group-accounts\", async (req, res) => {\n    try {\n      const groupId = req.query.groupId as string;\n      const accounts = await storage.getGroupAccounts(groupId);\n      res.json(accounts);\n    } catch (error) {\n      console.error(\"Error fetching group accounts:\", error);\n      res.status(500).json({ error: \"Failed to fetch group accounts\" });\n    }\n  });\n\n  app.post(\"/api/admin/group-accounts\", async (req, res) => {\n    try {\n      const account = await storage.createGroupAccount(req.body);\n      res.status(201).json(account);\n    } catch (error) {\n      console.error(\"Error creating group account:\", error);\n      res.status(500).json({ error: \"Failed to create group account\" });\n    }\n  });\n\n  app.put(\"/api/admin/group-accounts/:id\", async (req, res) => {\n    try {\n      const account = await storage.updateGroupAccount(req.params.id, req.body);\n      if (!account) {\n        return res.status(404).json({ error: \"Group account not found\" });\n      }\n      res.json(account);\n    } catch (error) {\n      console.error(\"Error updating group account:\", error);\n      res.status(500).json({ error: \"Failed to update group account\" });\n    }\n  });\n\n  app.post(\"/api/admin/group-accounts/:id/deactivate\", async (req, res) => {\n    try {\n      await storage.deactivateGroupAccount(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deactivating group account:\", error);\n      res.status(500).json({ error: \"Failed to deactivate group account\" });\n    }\n  });\n\n  app.get(\"/api/admin/audit-logs\", async (req, res) => {\n    try {\n      const entityType = req.query.entityType as string;\n      const entityId = req.query.entityId as string;\n      const logs = await storage.getAuditLogs(entityType, entityId);\n      res.json(logs);\n    } catch (error) {\n      console.error(\"Error fetching audit logs:\", error);\n      res.status(500).json({ error: \"Failed to fetch audit logs\" });\n    }\n  });\n\n  // Simulation Coordinator Routes\n  app.get(\"/api/coordinator/documents\", async (req, res) => {\n    try {\n      const sessionId = req.query.sessionId as string || \"session-1\";\n      const patientId = req.query.patientId as string;\n      const documents = await storage.getDocuments(sessionId, patientId);\n      res.json(documents);\n    } catch (error) {\n      console.error(\"Error fetching documents:\", error);\n      res.status(500).json({ error: \"Failed to fetch documents\" });\n    }\n  });\n\n  app.post(\"/api/coordinator/documents/upload\", async (req, res) => {\n    try {\n      // For now, we'll simulate document upload with the request body\n      // In a real implementation, this would handle file uploads\n      const document = await storage.uploadDocument({\n        sessionId: req.body.sessionId,\n        patientId: req.body.patientId || null,\n        category: req.body.category,\n        originalName: req.body.originalName || \"uploaded-file.pdf\",\n        filePath: `/uploads/${Date.now()}-${req.body.originalName || \"file.pdf\"}`,\n        fileSize: req.body.fileSize || 1024,\n        mimeType: req.body.mimeType || \"application/pdf\",\n        uploadedBy: \"coordinator-1\"\n      });\n      res.status(201).json(document);\n    } catch (error) {\n      console.error(\"Error uploading document:\", error);\n      res.status(500).json({ error: \"Failed to upload document\" });\n    }\n  });\n\n  app.delete(\"/api/coordinator/documents/:id\", async (req, res) => {\n    try {\n      await storage.deleteDocument(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting document:\", error);\n      res.status(500).json({ error: \"Failed to delete document\" });\n    }\n  });\n\n  app.get(\"/api/coordinator/document-releases\", async (req, res) => {\n    try {\n      const groupId = req.query.groupId as string;\n      const releases = await storage.getDocumentReleases(groupId);\n      res.json(releases);\n    } catch (error) {\n      console.error(\"Error fetching document releases:\", error);\n      res.status(500).json({ error: \"Failed to fetch document releases\" });\n    }\n  });\n\n  app.post(\"/api/coordinator/document-releases\", async (req, res) => {\n    try {\n      const release = await storage.scheduleDocumentRelease(req.body);\n      res.status(201).json(release);\n    } catch (error) {\n      console.error(\"Error scheduling document release:\", error);\n      res.status(500).json({ error: \"Failed to schedule document release\" });\n    }\n  });\n\n  app.post(\"/api/coordinator/document-releases/:id/release\", async (req, res) => {\n    try {\n      const release = await storage.releaseDocument(req.params.id, \"coordinator-1\");\n      res.json(release);\n    } catch (error) {\n      console.error(\"Error releasing document:\", error);\n      res.status(500).json({ error: \"Failed to release document\" });\n    }\n  });\n\n  app.delete(\"/api/coordinator/document-releases/:id\", async (req, res) => {\n    try {\n      await storage.cancelDocumentRelease(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error cancelling document release:\", error);\n      res.status(500).json({ error: \"Failed to cancel document release\" });\n    }\n  });\n\n  app.get(\"/api/coordinator/simulation-weeks\", async (req, res) => {\n    try {\n      const sessionId = req.query.sessionId as string || \"session-1\";\n      const weeks = await storage.getSimulationWeeks(sessionId);\n      res.json(weeks);\n    } catch (error) {\n      console.error(\"Error fetching simulation weeks:\", error);\n      res.status(500).json({ error: \"Failed to fetch simulation weeks\" });\n    }\n  });\n\n  app.post(\"/api/coordinator/simulation-weeks\", async (req, res) => {\n    try {\n      const week = await storage.createSimulationWeek(req.body);\n      res.status(201).json(week);\n    } catch (error) {\n      console.error(\"Error creating simulation week:\", error);\n      res.status(500).json({ error: \"Failed to create simulation week\" });\n    }\n  });\n\n  app.post(\"/api/coordinator/simulation-weeks/:id/activate\", async (req, res) => {\n    try {\n      const week = await storage.activateSimulationWeek(req.params.id);\n      res.json(week);\n    } catch (error) {\n      console.error(\"Error activating simulation week:\", error);\n      res.status(500).json({ error: \"Failed to activate simulation week\" });\n    }\n  });\n\n  app.put(\"/api/coordinator/simulation-weeks/:id\", async (req, res) => {\n    try {\n      const week = await storage.updateSimulationWeek(req.params.id, req.body);\n      if (!week) {\n        return res.status(404).json({ error: \"Simulation week not found\" });\n      }\n      res.json(week);\n    } catch (error) {\n      console.error(\"Error updating simulation week:\", error);\n      res.status(500).json({ error: \"Failed to update simulation week\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":20641},"server/storage.ts":{"content":"import { \n  type User, \n  type InsertUser, \n  type Session, \n  type InsertSession, \n  type Patient, \n  type InsertPatient,\n  type VitalSigns,\n  type InsertVitalSigns,\n  type LabResult,\n  type InsertLabResult,\n  type SoapNote,\n  type InsertSoapNote,\n  type Order,\n  type InsertOrder,\n  type MedicalHistory,\n  type InsertMedicalHistory,\n  type Medication,\n  type InsertMedication,\n  type Group,\n  type InsertGroup,\n  type GroupMember,\n  type InsertGroupMember,\n  type Asset,\n  type InsertAsset,\n  type AssetGroupVisibility,\n  type InsertAssetGroupVisibility,\n  type DataVersion,\n  type InsertDataVersion,\n  type GroupDataAssignment,\n  type InsertGroupDataAssignment,\n  type GroupAccount,\n  type InsertGroupAccount,\n  type Document,\n  type InsertDocument,\n  type DocumentRelease,\n  type InsertDocumentRelease,\n  type SimulationWeek,\n  type InsertSimulationWeek,\n  type AuditLog,\n  type InsertAuditLog\n} from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  // User management\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  \n  // Session management\n  createSession(session: InsertSession): Promise<Session>;\n  getSession(id: string): Promise<Session | undefined>;\n  updateSession(id: string, updates: Partial<Session>): Promise<Session | undefined>;\n  getActiveSessionsByInstructor(instructorId: string): Promise<Session[]>;\n  \n  // Patient management\n  createPatient(patient: InsertPatient): Promise<Patient>;\n  getPatient(id: string): Promise<Patient | undefined>;\n  getPatientsBySession(sessionId: string): Promise<Patient[]>;\n  updatePatient(id: string, updates: Partial<Patient>): Promise<Patient | undefined>;\n  \n  // Vital signs\n  createVitalSigns(vitals: InsertVitalSigns): Promise<VitalSigns>;\n  getLatestVitals(patientId: string): Promise<VitalSigns | undefined>;\n  getVitalHistory(patientId: string): Promise<VitalSigns[]>;\n  \n  // Lab results\n  createLabResult(labResult: InsertLabResult): Promise<LabResult>;\n  getLabResults(patientId: string): Promise<LabResult[]>;\n  updateLabResult(id: string, updates: Partial<LabResult>): Promise<LabResult | undefined>;\n  \n  // SOAP notes\n  createSoapNote(soapNote: InsertSoapNote): Promise<SoapNote>;\n  getSoapNotes(patientId: string): Promise<SoapNote[]>;\n  \n  // Orders\n  createOrder(order: InsertOrder): Promise<Order>;\n  getOrders(patientId: string): Promise<Order[]>;\n  updateOrder(id: string, updates: Partial<Order>): Promise<Order | undefined>;\n  \n  // Medical history\n  createMedicalHistory(history: InsertMedicalHistory): Promise<MedicalHistory>;\n  getMedicalHistory(patientId: string): Promise<MedicalHistory[]>;\n  \n  // Medications\n  createMedication(medication: InsertMedication): Promise<Medication>;\n  getMedications(patientId: string): Promise<Medication[]>;\n  \n  // Groups\n  createGroup(group: InsertGroup): Promise<Group>;\n  getGroup(id: string): Promise<Group | undefined>;\n  getGroupsBySession(sessionId: string): Promise<Group[]>;\n  \n  // Group Members\n  addGroupMember(member: InsertGroupMember): Promise<GroupMember>;\n  removeGroupMember(groupId: string, userId: string): Promise<void>;\n  getGroupMembers(groupId: string): Promise<GroupMember[]>;\n  getUserGroups(userId: string): Promise<Group[]>;\n  \n  // Assets\n  createAsset(asset: InsertAsset): Promise<Asset>;\n  getAsset(id: string): Promise<Asset | undefined>;\n  getAssetsBySession(sessionId: string): Promise<Asset[]>;\n  deleteAsset(id: string): Promise<void>;\n  \n  // Asset Group Visibility\n  setAssetVisibility(visibility: InsertAssetGroupVisibility): Promise<AssetGroupVisibility>;\n  getAssetVisibility(assetId: string, groupId: string): Promise<AssetGroupVisibility | undefined>;\n  getVisibleAssetsForGroup(groupId: string): Promise<Asset[]>;\n  updateAssetVisibility(assetId: string, groupId: string, visible: boolean, changedBy: string): Promise<AssetGroupVisibility>;\n  bulkUpdateAssetVisibility(assetIds: string[], groupId: string, visible: boolean, changedBy: string): Promise<void>;\n\n  // System Admin: Data Versioning\n  createDataVersion(dataVersion: InsertDataVersion): Promise<DataVersion>;\n  getDataVersions(sessionId: string): Promise<DataVersion[]>;\n  getDataVersion(id: string): Promise<DataVersion | undefined>;\n  deleteDataVersion(id: string): Promise<void>;\n\n  // System Admin: Group Data Assignments\n  assignGroupData(assignment: InsertGroupDataAssignment): Promise<GroupDataAssignment>;\n  getGroupDataAssignments(groupId: string): Promise<GroupDataAssignment[]>;\n  removeGroupDataAssignment(groupId: string, patientId: string): Promise<void>;\n\n  // System Admin: Group Account Management\n  createGroupAccount(account: InsertGroupAccount): Promise<GroupAccount>;\n  getGroupAccounts(groupId?: string): Promise<GroupAccount[]>;\n  getGroupAccount(id: string): Promise<GroupAccount | undefined>;\n  updateGroupAccount(id: string, updates: Partial<GroupAccount>): Promise<GroupAccount | undefined>;\n  deactivateGroupAccount(id: string): Promise<void>;\n\n  // System Admin: User Management\n  getAllUsers(): Promise<User[]>;\n  updateUser(id: string, updates: Partial<User>): Promise<User | undefined>;\n  deleteUser(id: string): Promise<void>;\n\n  // Simulation Coordinator: Document Management\n  uploadDocument(document: InsertDocument): Promise<Document>;\n  getDocuments(sessionId: string, patientId?: string): Promise<Document[]>;\n  getDocument(id: string): Promise<Document | undefined>;\n  deleteDocument(id: string): Promise<void>;\n\n  // Simulation Coordinator: Document Release Management\n  scheduleDocumentRelease(release: InsertDocumentRelease): Promise<DocumentRelease>;\n  getDocumentReleases(groupId?: string): Promise<DocumentRelease[]>;\n  releaseDocument(releaseId: string, releasedBy: string): Promise<DocumentRelease>;\n  cancelDocumentRelease(releaseId: string): Promise<void>;\n  getReleasedDocumentsForGroup(groupId: string): Promise<Document[]>;\n\n  // Simulation Coordinator: Simulation Week Management\n  createSimulationWeek(week: InsertSimulationWeek): Promise<SimulationWeek>;\n  getSimulationWeeks(sessionId: string): Promise<SimulationWeek[]>;\n  getActiveSimulationWeek(sessionId: string): Promise<SimulationWeek | undefined>;\n  activateSimulationWeek(weekId: string): Promise<SimulationWeek>;\n  updateSimulationWeek(id: string, updates: Partial<SimulationWeek>): Promise<SimulationWeek | undefined>;\n\n  // System Admin: Audit Trail\n  logActivity(log: InsertAuditLog): Promise<AuditLog>;\n  getAuditLogs(entityType?: string, entityId?: string): Promise<AuditLog[]>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User> = new Map();\n  private sessions: Map<string, Session> = new Map();\n  private patients: Map<string, Patient> = new Map();\n  private vitalSigns: Map<string, VitalSigns> = new Map();\n  private labResults: Map<string, LabResult> = new Map();\n  private soapNotes: Map<string, SoapNote> = new Map();\n  private orders: Map<string, Order> = new Map();\n  private medicalHistory: Map<string, MedicalHistory> = new Map();\n  private medications: Map<string, Medication> = new Map();\n  private groups: Map<string, Group> = new Map();\n  private groupMembers: Map<string, GroupMember> = new Map();\n  private assets: Map<string, Asset> = new Map();\n  private assetGroupVisibility: Map<string, AssetGroupVisibility> = new Map();\n  \n  // New storage for System Admin and Simulation Coordinator features\n  private dataVersions: Map<string, DataVersion> = new Map();\n  private groupDataAssignments: Map<string, GroupDataAssignment> = new Map();\n  private groupAccounts: Map<string, GroupAccount> = new Map();\n  private documents: Map<string, Document> = new Map();\n  private documentReleases: Map<string, DocumentRelease> = new Map();\n  private simulationWeeks: Map<string, SimulationWeek> = new Map();\n  private auditLogs: Map<string, AuditLog> = new Map();\n\n  constructor() {\n    this.initializeTestData();\n  }\n\n  private initializeTestData() {\n    // Create test instructor\n    const instructor: User = {\n      id: \"instructor-1\",\n      username: \"instructor\",\n      password: \"password\",\n      role: \"instructor\",\n      firstName: \"Dr. Sarah\",\n      lastName: \"Chen\",\n      createdAt: new Date(),\n    };\n    this.users.set(instructor.id, instructor);\n\n    // Create test students\n    const student1: User = {\n      id: \"student-1\",\n      username: \"student\",\n      password: \"password\",\n      role: \"student\",\n      firstName: \"Alex\",\n      lastName: \"Johnson\",\n      createdAt: new Date(),\n    };\n    this.users.set(student1.id, student1);\n\n    const student2: User = {\n      id: \"student-2\",\n      username: \"student2\",\n      password: \"password\",\n      role: \"student\",\n      firstName: \"Emma\",\n      lastName: \"Davis\",\n      createdAt: new Date(),\n    };\n    this.users.set(student2.id, student2);\n\n    const student3: User = {\n      id: \"student-3\",\n      username: \"student3\",\n      password: \"password\",\n      role: \"student\",\n      firstName: \"Michael\",\n      lastName: \"Wilson\",\n      createdAt: new Date(),\n    };\n    this.users.set(student3.id, student3);\n\n    // Create System Admin\n    const admin: User = {\n      id: \"admin-1\",\n      username: \"admin\",\n      password: \"password\",\n      role: \"admin\",\n      firstName: \"Dr. James\",\n      lastName: \"Rodriguez\",\n      createdAt: new Date(),\n    };\n    this.users.set(admin.id, admin);\n\n    // Create Simulation Coordinator\n    const coordinator: User = {\n      id: \"coordinator-1\",\n      username: \"coordinator\",\n      password: \"password\",\n      role: \"coordinator\",\n      firstName: \"Lisa\",\n      lastName: \"Thompson\",\n      createdAt: new Date(),\n    };\n    this.users.set(coordinator.id, coordinator);\n\n    // Create test session\n    const session: Session = {\n      id: \"session-1\",\n      name: \"Emergency Department Scenario\",\n      instructorId: instructor.id,\n      scenarioId: null,\n      active: true,\n      timeRemaining: 45,\n      createdAt: new Date(),\n    };\n    this.sessions.set(session.id, session);\n\n    // Create test groups\n    const group1: Group = {\n      id: \"group-1\",\n      name: \"Mon_AM_WardA\",\n      description: \"Monday Morning Ward A Team\",\n      sessionId: session.id,\n      createdAt: new Date(),\n    };\n    this.groups.set(group1.id, group1);\n\n    const group2: Group = {\n      id: \"group-2\",\n      name: \"Mon_PM_WardB\",\n      description: \"Monday Afternoon Ward B Team\",\n      sessionId: session.id,\n      createdAt: new Date(),\n    };\n    this.groups.set(group2.id, group2);\n\n    // Add students to groups\n    const groupMember1: GroupMember = {\n      id: \"gm-1\",\n      groupId: group1.id,\n      userId: student1.id,\n      joinedAt: new Date(),\n    };\n    this.groupMembers.set(groupMember1.id, groupMember1);\n\n    const groupMember2: GroupMember = {\n      id: \"gm-2\",\n      groupId: group2.id,\n      userId: student2.id,\n      joinedAt: new Date(),\n    };\n    this.groupMembers.set(groupMember2.id, groupMember2);\n\n    const groupMember3: GroupMember = {\n      id: \"gm-3\",\n      groupId: group2.id,\n      userId: student3.id,\n      joinedAt: new Date(),\n    };\n    this.groupMembers.set(groupMember3.id, groupMember3);\n\n    // Create test assets\n    const asset1: Asset = {\n      id: \"asset-1\",\n      filename: \"chest_xray_report.pdf\",\n      type: \"pdf\",\n      filePath: \"/uploads/chest_xray_report.pdf\",\n      sessionId: session.id,\n      uploadedBy: instructor.id,\n      uploadedAt: new Date(),\n    };\n    this.assets.set(asset1.id, asset1);\n\n    const asset2: Asset = {\n      id: \"asset-2\",\n      filename: \"lab_results_complete.pdf\",\n      type: \"lab\",\n      filePath: \"/uploads/lab_results_complete.pdf\",\n      sessionId: session.id,\n      uploadedBy: instructor.id,\n      uploadedAt: new Date(),\n    };\n    this.assets.set(asset2.id, asset2);\n\n    const asset3: Asset = {\n      id: \"asset-3\",\n      filename: \"ecg_reading.png\",\n      type: \"image\",\n      filePath: \"/uploads/ecg_reading.png\",\n      sessionId: session.id,\n      uploadedBy: instructor.id,\n      uploadedAt: new Date(),\n    };\n    this.assets.set(asset3.id, asset3);\n\n    // Set initial visibility (asset1 visible to group1, asset2 hidden from both groups, asset3 visible to both)\n    const visibility1: AssetGroupVisibility = {\n      id: \"vis-1\",\n      assetId: asset1.id,\n      groupId: group1.id,\n      visible: true,\n      changedBy: instructor.id,\n      changedAt: new Date(),\n    };\n    this.assetGroupVisibility.set(visibility1.id, visibility1);\n\n    const visibility2: AssetGroupVisibility = {\n      id: \"vis-2\",\n      assetId: asset1.id,\n      groupId: group2.id,\n      visible: false,\n      changedBy: instructor.id,\n      changedAt: new Date(),\n    };\n    this.assetGroupVisibility.set(visibility2.id, visibility2);\n\n    const visibility3: AssetGroupVisibility = {\n      id: \"vis-3\",\n      assetId: asset2.id,\n      groupId: group1.id,\n      visible: false,\n      changedBy: instructor.id,\n      changedAt: new Date(),\n    };\n    this.assetGroupVisibility.set(visibility3.id, visibility3);\n\n    const visibility4: AssetGroupVisibility = {\n      id: \"vis-4\",\n      assetId: asset2.id,\n      groupId: group2.id,\n      visible: false,\n      changedBy: instructor.id,\n      changedAt: new Date(),\n    };\n    this.assetGroupVisibility.set(visibility4.id, visibility4);\n\n    const visibility5: AssetGroupVisibility = {\n      id: \"vis-5\",\n      assetId: asset3.id,\n      groupId: group1.id,\n      visible: true,\n      changedBy: instructor.id,\n      changedAt: new Date(),\n    };\n    this.assetGroupVisibility.set(visibility5.id, visibility5);\n\n    const visibility6: AssetGroupVisibility = {\n      id: \"vis-6\",\n      assetId: asset3.id,\n      groupId: group2.id,\n      visible: true,\n      changedBy: instructor.id,\n      changedAt: new Date(),\n    };\n    this.assetGroupVisibility.set(visibility6.id, visibility6);\n\n    // Create test patients with comprehensive medical data\n    const patient1: Patient = {\n      id: \"patient-1\",\n      mrn: \"12345678\",\n      firstName: \"Jane\",\n      lastName: \"Mitchell\",\n      dateOfBirth: \"1978-03-15\",\n      gender: \"Female\",\n      location: \"Emergency Department - Bed 3\",\n      status: \"critical\",\n      chiefComplaint: \"Severe chest pain and difficulty breathing for the past 2 hours. Patient reports crushing chest pain radiating to left arm, associated with nausea and diaphoresis. Pain started abruptly while climbing stairs at home.\",\n      sessionId: session.id,\n      createdAt: new Date(),\n    };\n    this.patients.set(patient1.id, patient1);\n\n    const patient2: Patient = {\n      id: \"patient-2\",\n      mrn: \"87654321\",\n      firstName: \"Robert\",\n      lastName: \"Johnson\",\n      dateOfBirth: \"1956-08-22\",\n      gender: \"Male\",\n      location: \"Emergency Department - Bed 7\",\n      status: \"stable\",\n      chiefComplaint: \"Chest pain on exertion\",\n      sessionId: session.id,\n      createdAt: new Date(),\n    };\n    this.patients.set(patient2.id, patient2);\n\n    // Create vital signs for patient 1\n    const vitals1: VitalSigns = {\n      id: \"vitals-1\",\n      patientId: patient1.id,\n      bloodPressure: \"165/95\",\n      heartRate: 112,\n      respiratoryRate: 24,\n      temperature: \"98.6°F\",\n      oxygenSaturation: 92,\n      recordedAt: new Date(),\n      recordedBy: instructor.id,\n    };\n    this.vitalSigns.set(vitals1.id, vitals1);\n\n    // Create lab results for patient 1\n    const labResult1: LabResult = {\n      id: \"lab-1\",\n      patientId: patient1.id,\n      testName: \"Glucose\",\n      value: \"245\",\n      unit: \"mg/dL\",\n      referenceRange: \"70-100\",\n      status: \"completed\",\n      orderedAt: new Date(),\n      completedAt: new Date(),\n      orderedBy: instructor.id,\n    };\n    this.labResults.set(labResult1.id, labResult1);\n\n    const labResult2: LabResult = {\n      id: \"lab-2\",\n      patientId: patient1.id,\n      testName: \"Troponin\",\n      value: \"\",\n      unit: \"ng/mL\",\n      referenceRange: \"<0.04\",\n      status: \"pending\",\n      orderedAt: new Date(),\n      completedAt: null,\n      orderedBy: instructor.id,\n    };\n    this.labResults.set(labResult2.id, labResult2);\n\n    // Create medical history for patient 1\n    const history1: MedicalHistory = {\n      id: \"history-1\",\n      patientId: patient1.id,\n      condition: \"Hypertension\",\n      diagnosedYear: \"2018\",\n      notes: \"Well controlled with medication\",\n    };\n    this.medicalHistory.set(history1.id, history1);\n\n    const history2: MedicalHistory = {\n      id: \"history-2\",\n      patientId: patient1.id,\n      condition: \"Type 2 Diabetes\",\n      diagnosedYear: \"2020\",\n      notes: \"Managed with metformin\",\n    };\n    this.medicalHistory.set(history2.id, history2);\n\n    // Create comprehensive medications for patient 1 (Jane Mitchell)\n    const medication1: Medication = {\n      id: \"med-1\",\n      patientId: patient1.id,\n      name: \"Lisinopril\",\n      dosage: \"10mg\",\n      frequency: \"daily\",\n      prescribedBy: instructor.id,\n      prescribedAt: new Date(),\n    };\n    this.medications.set(medication1.id, medication1);\n\n    const medication2: Medication = {\n      id: \"med-2\",\n      patientId: patient1.id,\n      name: \"Metformin\",\n      dosage: \"500mg\",\n      frequency: \"twice daily\",\n      prescribedBy: instructor.id,\n      prescribedAt: new Date(),\n    };\n    this.medications.set(medication2.id, medication2);\n\n    const medication3: Medication = {\n      id: \"med-3\",\n      patientId: patient1.id,\n      name: \"Atorvastatin\",\n      dosage: \"20mg\",\n      frequency: \"daily at bedtime\",\n      prescribedBy: instructor.id,\n      prescribedAt: new Date(),\n    };\n    this.medications.set(medication3.id, medication3);\n\n    const medication4: Medication = {\n      id: \"med-4\",\n      patientId: patient1.id,\n      name: \"Aspirin\",\n      dosage: \"81mg\",\n      frequency: \"daily\",\n      prescribedBy: instructor.id,\n      prescribedAt: new Date(),\n    };\n    this.medications.set(medication4.id, medication4);\n\n    // Add comprehensive lab results for Jane Mitchell\n    const labResult3: LabResult = {\n      id: \"lab-3\",\n      patientId: patient1.id,\n      testName: \"Complete Blood Count (CBC)\",\n      value: \"WBC: 11.2, RBC: 4.1, Hgb: 12.8, Hct: 38.5, Plt: 285\",\n      unit: \"various\",\n      referenceRange: \"WBC: 4.0-11.0, RBC: 4.2-5.4, Hgb: 12-15.5, Hct: 36-46, Plt: 150-400\",\n      status: \"completed\",\n      orderedAt: new Date(Date.now() - 2 * 60 * 60 * 1000), // 2 hours ago\n      completedAt: new Date(Date.now() - 1 * 60 * 60 * 1000), // 1 hour ago\n      orderedBy: instructor.id,\n    };\n    this.labResults.set(labResult3.id, labResult3);\n\n    const labResult4: LabResult = {\n      id: \"lab-4\",\n      patientId: patient1.id,\n      testName: \"Basic Metabolic Panel (BMP)\",\n      value: \"Na: 142, K: 4.1, Cl: 105, CO2: 22, BUN: 18, Cr: 1.1, Glucose: 245\",\n      unit: \"various\",\n      referenceRange: \"Na: 136-145, K: 3.5-5.0, Cl: 98-107, CO2: 22-28, BUN: 7-20, Cr: 0.6-1.2, Glucose: 70-100\",\n      status: \"completed\",\n      orderedAt: new Date(Date.now() - 2 * 60 * 60 * 1000),\n      completedAt: new Date(Date.now() - 1 * 60 * 60 * 1000),\n      orderedBy: instructor.id,\n    };\n    this.labResults.set(labResult4.id, labResult4);\n\n    const labResult5: LabResult = {\n      id: \"lab-5\",\n      patientId: patient1.id,\n      testName: \"Lipid Panel\",\n      value: \"Total Cholesterol: 245, HDL: 38, LDL: 165, Triglycerides: 210\",\n      unit: \"mg/dL\",\n      referenceRange: \"Total: <200, HDL: >40, LDL: <100, Triglycerides: <150\",\n      status: \"completed\",\n      orderedAt: new Date(Date.now() - 3 * 60 * 60 * 1000),\n      completedAt: new Date(Date.now() - 2 * 60 * 60 * 1000),\n      orderedBy: instructor.id,\n    };\n    this.labResults.set(labResult5.id, labResult5);\n\n    const labResult6: LabResult = {\n      id: \"lab-6\",\n      patientId: patient1.id,\n      testName: \"Cardiac Enzymes - CK-MB\",\n      value: \"8.2\",\n      unit: \"ng/mL\",\n      referenceRange: \"0.0-6.3\",\n      status: \"completed\",\n      orderedAt: new Date(Date.now() - 1 * 60 * 60 * 1000),\n      completedAt: new Date(Date.now() - 30 * 60 * 1000), // 30 minutes ago\n      orderedBy: instructor.id,\n    };\n    this.labResults.set(labResult6.id, labResult6);\n\n    const labResult7: LabResult = {\n      id: \"lab-7\",\n      patientId: patient1.id,\n      testName: \"PT/INR\",\n      value: \"12.5 / 1.1\",\n      unit: \"seconds / ratio\",\n      referenceRange: \"11.0-13.0 / 0.8-1.2\",\n      status: \"completed\",\n      orderedAt: new Date(Date.now() - 2 * 60 * 60 * 1000),\n      completedAt: new Date(Date.now() - 1.5 * 60 * 60 * 1000),\n      orderedBy: instructor.id,\n    };\n    this.labResults.set(labResult7.id, labResult7);\n\n    // Add additional medical history for Jane Mitchell\n    const history3: MedicalHistory = {\n      id: \"history-3\",\n      patientId: patient1.id,\n      condition: \"Hyperlipidemia\",\n      diagnosedYear: \"2019\",\n      notes: \"Elevated cholesterol levels, managed with statin therapy\",\n    };\n    this.medicalHistory.set(history3.id, history3);\n\n    const history4: MedicalHistory = {\n      id: \"history-4\",\n      patientId: patient1.id,\n      condition: \"Family History of CAD\",\n      diagnosedYear: \"N/A\",\n      notes: \"Father had MI at age 58, Mother has hypertension\",\n    };\n    this.medicalHistory.set(history4.id, history4);\n\n    const history5: MedicalHistory = {\n      id: \"history-5\",\n      patientId: patient1.id,\n      condition: \"Tobacco Use\",\n      diagnosedYear: \"1995\",\n      notes: \"Former smoker, quit 5 years ago. 20 pack-year history\",\n    };\n    this.medicalHistory.set(history5.id, history5);\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(user => user.username === username);\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { ...insertUser, id, createdAt: new Date() };\n    this.users.set(id, user);\n    return user;\n  }\n\n  async createSession(insertSession: InsertSession): Promise<Session> {\n    const id = randomUUID();\n    const session: Session = { ...insertSession, id, createdAt: new Date() };\n    this.sessions.set(id, session);\n    return session;\n  }\n\n  async getSession(id: string): Promise<Session | undefined> {\n    return this.sessions.get(id);\n  }\n\n  async updateSession(id: string, updates: Partial<Session>): Promise<Session | undefined> {\n    const session = this.sessions.get(id);\n    if (!session) return undefined;\n    const updatedSession = { ...session, ...updates };\n    this.sessions.set(id, updatedSession);\n    return updatedSession;\n  }\n\n  async getActiveSessionsByInstructor(instructorId: string): Promise<Session[]> {\n    return Array.from(this.sessions.values()).filter(\n      session => session.instructorId === instructorId && session.active\n    );\n  }\n\n  async createPatient(insertPatient: InsertPatient): Promise<Patient> {\n    const id = randomUUID();\n    const patient: Patient = { ...insertPatient, id, createdAt: new Date() };\n    this.patients.set(id, patient);\n    return patient;\n  }\n\n  async getPatient(id: string): Promise<Patient | undefined> {\n    return this.patients.get(id);\n  }\n\n  async getPatientsBySession(sessionId: string): Promise<Patient[]> {\n    return Array.from(this.patients.values()).filter(\n      patient => patient.sessionId === sessionId\n    );\n  }\n\n  async updatePatient(id: string, updates: Partial<Patient>): Promise<Patient | undefined> {\n    const patient = this.patients.get(id);\n    if (!patient) return undefined;\n    const updatedPatient = { ...patient, ...updates };\n    this.patients.set(id, updatedPatient);\n    return updatedPatient;\n  }\n\n  async createVitalSigns(insertVitals: InsertVitalSigns): Promise<VitalSigns> {\n    const id = randomUUID();\n    const vitals: VitalSigns = { ...insertVitals, id, recordedAt: new Date() };\n    this.vitalSigns.set(id, vitals);\n    return vitals;\n  }\n\n  async getLatestVitals(patientId: string): Promise<VitalSigns | undefined> {\n    const vitals = Array.from(this.vitalSigns.values())\n      .filter(v => v.patientId === patientId)\n      .sort((a, b) => new Date(b.recordedAt).getTime() - new Date(a.recordedAt).getTime());\n    return vitals[0];\n  }\n\n  async getVitalHistory(patientId: string): Promise<VitalSigns[]> {\n    return Array.from(this.vitalSigns.values())\n      .filter(v => v.patientId === patientId)\n      .sort((a, b) => new Date(b.recordedAt).getTime() - new Date(a.recordedAt).getTime());\n  }\n\n  async createLabResult(insertLabResult: InsertLabResult): Promise<LabResult> {\n    const id = randomUUID();\n    const labResult: LabResult = { ...insertLabResult, id, orderedAt: new Date() };\n    this.labResults.set(id, labResult);\n    return labResult;\n  }\n\n  async getLabResults(patientId: string): Promise<LabResult[]> {\n    return Array.from(this.labResults.values()).filter(\n      lab => lab.patientId === patientId\n    );\n  }\n\n  async updateLabResult(id: string, updates: Partial<LabResult>): Promise<LabResult | undefined> {\n    const labResult = this.labResults.get(id);\n    if (!labResult) return undefined;\n    const updatedLabResult = { ...labResult, ...updates };\n    this.labResults.set(id, updatedLabResult);\n    return updatedLabResult;\n  }\n\n  async createSoapNote(insertSoapNote: InsertSoapNote): Promise<SoapNote> {\n    const id = randomUUID();\n    const soapNote: SoapNote = { ...insertSoapNote, id, createdAt: new Date() };\n    this.soapNotes.set(id, soapNote);\n    return soapNote;\n  }\n\n  async getSoapNotes(patientId: string): Promise<SoapNote[]> {\n    return Array.from(this.soapNotes.values())\n      .filter(note => note.patientId === patientId)\n      .sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime());\n  }\n\n  async createOrder(insertOrder: InsertOrder): Promise<Order> {\n    const id = randomUUID();\n    const order: Order = { ...insertOrder, id, orderedAt: new Date() };\n    this.orders.set(id, order);\n    return order;\n  }\n\n  async getOrders(patientId: string): Promise<Order[]> {\n    return Array.from(this.orders.values())\n      .filter(order => order.patientId === patientId)\n      .sort((a, b) => new Date(b.orderedAt).getTime() - new Date(a.orderedAt).getTime());\n  }\n\n  async updateOrder(id: string, updates: Partial<Order>): Promise<Order | undefined> {\n    const order = this.orders.get(id);\n    if (!order) return undefined;\n    const updatedOrder = { ...order, ...updates };\n    this.orders.set(id, updatedOrder);\n    return updatedOrder;\n  }\n\n  async createMedicalHistory(insertHistory: InsertMedicalHistory): Promise<MedicalHistory> {\n    const id = randomUUID();\n    const history: MedicalHistory = { ...insertHistory, id };\n    this.medicalHistory.set(id, history);\n    return history;\n  }\n\n  async getMedicalHistory(patientId: string): Promise<MedicalHistory[]> {\n    return Array.from(this.medicalHistory.values()).filter(\n      history => history.patientId === patientId\n    );\n  }\n\n  async createMedication(insertMedication: InsertMedication): Promise<Medication> {\n    const id = randomUUID();\n    const medication: Medication = { ...insertMedication, id, prescribedAt: new Date() };\n    this.medications.set(id, medication);\n    return medication;\n  }\n\n  async getMedications(patientId: string): Promise<Medication[]> {\n    return Array.from(this.medications.values()).filter(\n      medication => medication.patientId === patientId\n    );\n  }\n\n  // Groups\n  async createGroup(insertGroup: InsertGroup): Promise<Group> {\n    const id = randomUUID();\n    const group: Group = { ...insertGroup, id, createdAt: new Date() };\n    this.groups.set(id, group);\n    return group;\n  }\n\n  async getGroup(id: string): Promise<Group | undefined> {\n    return this.groups.get(id);\n  }\n\n  async getGroupsBySession(sessionId: string): Promise<Group[]> {\n    return Array.from(this.groups.values()).filter(\n      group => group.sessionId === sessionId\n    );\n  }\n\n  // Group Members\n  async addGroupMember(insertMember: InsertGroupMember): Promise<GroupMember> {\n    const id = randomUUID();\n    const member: GroupMember = { ...insertMember, id, joinedAt: new Date() };\n    this.groupMembers.set(id, member);\n    return member;\n  }\n\n  async removeGroupMember(groupId: string, userId: string): Promise<void> {\n    for (const [id, member] of this.groupMembers.entries()) {\n      if (member.groupId === groupId && member.userId === userId) {\n        this.groupMembers.delete(id);\n        break;\n      }\n    }\n  }\n\n  async getGroupMembers(groupId: string): Promise<GroupMember[]> {\n    return Array.from(this.groupMembers.values()).filter(\n      member => member.groupId === groupId\n    );\n  }\n\n  async getUserGroups(userId: string): Promise<Group[]> {\n    const userMemberships = Array.from(this.groupMembers.values()).filter(\n      member => member.userId === userId\n    );\n    return userMemberships.map(membership => this.groups.get(membership.groupId)!).filter(Boolean);\n  }\n\n  // Assets\n  async createAsset(insertAsset: InsertAsset): Promise<Asset> {\n    const id = randomUUID();\n    const asset: Asset = { ...insertAsset, id, uploadedAt: new Date() };\n    this.assets.set(id, asset);\n    return asset;\n  }\n\n  async getAsset(id: string): Promise<Asset | undefined> {\n    return this.assets.get(id);\n  }\n\n  async getAssetsBySession(sessionId: string): Promise<Asset[]> {\n    return Array.from(this.assets.values()).filter(\n      asset => asset.sessionId === sessionId\n    );\n  }\n\n  async deleteAsset(id: string): Promise<void> {\n    this.assets.delete(id);\n    // Also remove visibility records\n    for (const [visId, visibility] of this.assetGroupVisibility.entries()) {\n      if (visibility.assetId === id) {\n        this.assetGroupVisibility.delete(visId);\n      }\n    }\n  }\n\n  // Asset Group Visibility\n  async setAssetVisibility(insertVisibility: InsertAssetGroupVisibility): Promise<AssetGroupVisibility> {\n    const id = randomUUID();\n    const visibility: AssetGroupVisibility = { ...insertVisibility, id, changedAt: new Date() };\n    this.assetGroupVisibility.set(id, visibility);\n    return visibility;\n  }\n\n  async getAssetVisibility(assetId: string, groupId: string): Promise<AssetGroupVisibility | undefined> {\n    return Array.from(this.assetGroupVisibility.values()).find(\n      visibility => visibility.assetId === assetId && visibility.groupId === groupId\n    );\n  }\n\n  async getVisibleAssetsForGroup(groupId: string): Promise<Asset[]> {\n    const visibleAssetIds = Array.from(this.assetGroupVisibility.values())\n      .filter(visibility => visibility.groupId === groupId && visibility.visible)\n      .map(visibility => visibility.assetId);\n    \n    return Array.from(this.assets.values()).filter(\n      asset => visibleAssetIds.includes(asset.id)\n    );\n  }\n\n  async updateAssetVisibility(assetId: string, groupId: string, visible: boolean, changedBy: string): Promise<AssetGroupVisibility> {\n    // Find existing visibility record\n    for (const [id, visibility] of this.assetGroupVisibility.entries()) {\n      if (visibility.assetId === assetId && visibility.groupId === groupId) {\n        const updated: AssetGroupVisibility = {\n          ...visibility,\n          visible,\n          changedBy,\n          changedAt: new Date(),\n        };\n        this.assetGroupVisibility.set(id, updated);\n        return updated;\n      }\n    }\n\n    // Create new visibility record if not found\n    return this.setAssetVisibility({ assetId, groupId, visible, changedBy });\n  }\n\n  async bulkUpdateAssetVisibility(assetIds: string[], groupId: string, visible: boolean, changedBy: string): Promise<void> {\n    for (const assetId of assetIds) {\n      await this.updateAssetVisibility(assetId, groupId, visible, changedBy);\n    }\n  }\n\n  // System Admin: Data Versioning\n  async createDataVersion(dataVersion: InsertDataVersion): Promise<DataVersion> {\n    const id = `data-version-${Date.now()}`;\n    const newDataVersion: DataVersion = {\n      id,\n      ...dataVersion,\n      createdAt: new Date(),\n    };\n    this.dataVersions.set(id, newDataVersion);\n    return newDataVersion;\n  }\n\n  async getDataVersions(sessionId: string): Promise<DataVersion[]> {\n    return Array.from(this.dataVersions.values()).filter(\n      version => version.sessionId === sessionId\n    );\n  }\n\n  async getDataVersion(id: string): Promise<DataVersion | undefined> {\n    return this.dataVersions.get(id);\n  }\n\n  async deleteDataVersion(id: string): Promise<void> {\n    this.dataVersions.delete(id);\n  }\n\n  // System Admin: Group Data Assignments\n  async assignGroupData(assignment: InsertGroupDataAssignment): Promise<GroupDataAssignment> {\n    const id = `assignment-${Date.now()}`;\n    const newAssignment: GroupDataAssignment = {\n      id,\n      ...assignment,\n      assignedAt: new Date(),\n    };\n    this.groupDataAssignments.set(id, newAssignment);\n    return newAssignment;\n  }\n\n  async getGroupDataAssignments(groupId: string): Promise<GroupDataAssignment[]> {\n    return Array.from(this.groupDataAssignments.values()).filter(\n      assignment => assignment.groupId === groupId\n    );\n  }\n\n  async removeGroupDataAssignment(groupId: string, patientId: string): Promise<void> {\n    for (const [id, assignment] of this.groupDataAssignments.entries()) {\n      if (assignment.groupId === groupId && assignment.patientId === patientId) {\n        this.groupDataAssignments.delete(id);\n        break;\n      }\n    }\n  }\n\n  // System Admin: Group Account Management\n  async createGroupAccount(account: InsertGroupAccount): Promise<GroupAccount> {\n    const id = `group-account-${Date.now()}`;\n    const newAccount: GroupAccount = {\n      id,\n      ...account,\n      active: true,\n      createdAt: new Date(),\n    };\n    this.groupAccounts.set(id, newAccount);\n    return newAccount;\n  }\n\n  async getGroupAccounts(groupId?: string): Promise<GroupAccount[]> {\n    const accounts = Array.from(this.groupAccounts.values());\n    return groupId ? accounts.filter(account => account.groupId === groupId) : accounts;\n  }\n\n  async getGroupAccount(id: string): Promise<GroupAccount | undefined> {\n    return this.groupAccounts.get(id);\n  }\n\n  async updateGroupAccount(id: string, updates: Partial<GroupAccount>): Promise<GroupAccount | undefined> {\n    const account = this.groupAccounts.get(id);\n    if (!account) return undefined;\n\n    const updated: GroupAccount = { ...account, ...updates };\n    this.groupAccounts.set(id, updated);\n    return updated;\n  }\n\n  async deactivateGroupAccount(id: string): Promise<void> {\n    const account = this.groupAccounts.get(id);\n    if (account) {\n      account.active = false;\n      this.groupAccounts.set(id, account);\n    }\n  }\n\n  // System Admin: User Management\n  async getAllUsers(): Promise<User[]> {\n    return Array.from(this.users.values());\n  }\n\n  async updateUser(id: string, updates: Partial<User>): Promise<User | undefined> {\n    const user = this.users.get(id);\n    if (!user) return undefined;\n\n    const updated: User = { ...user, ...updates };\n    this.users.set(id, updated);\n    return updated;\n  }\n\n  async deleteUser(id: string): Promise<void> {\n    this.users.delete(id);\n  }\n\n  // Simulation Coordinator: Document Management\n  async uploadDocument(document: InsertDocument): Promise<Document> {\n    const id = `document-${Date.now()}`;\n    const newDocument: Document = {\n      id,\n      ...document,\n      uploadedAt: new Date(),\n    };\n    this.documents.set(id, newDocument);\n    return newDocument;\n  }\n\n  async getDocuments(sessionId: string, patientId?: string): Promise<Document[]> {\n    const documents = Array.from(this.documents.values()).filter(\n      doc => doc.sessionId === sessionId\n    );\n    return patientId ? documents.filter(doc => doc.patientId === patientId) : documents;\n  }\n\n  async getDocument(id: string): Promise<Document | undefined> {\n    return this.documents.get(id);\n  }\n\n  async deleteDocument(id: string): Promise<void> {\n    this.documents.delete(id);\n  }\n\n  // Simulation Coordinator: Document Release Management\n  async scheduleDocumentRelease(release: InsertDocumentRelease): Promise<DocumentRelease> {\n    const id = `release-${Date.now()}`;\n    const newRelease: DocumentRelease = {\n      id,\n      ...release,\n      status: 'pending',\n      createdAt: new Date(),\n    };\n    this.documentReleases.set(id, newRelease);\n    return newRelease;\n  }\n\n  async getDocumentReleases(groupId?: string): Promise<DocumentRelease[]> {\n    const releases = Array.from(this.documentReleases.values());\n    return groupId ? releases.filter(release => release.groupId === groupId) : releases;\n  }\n\n  async releaseDocument(releaseId: string, releasedBy: string): Promise<DocumentRelease> {\n    const release = this.documentReleases.get(releaseId);\n    if (!release) {\n      throw new Error('Release not found');\n    }\n\n    const updated: DocumentRelease = {\n      ...release,\n      status: 'released',\n      releasedAt: new Date(),\n      releasedBy,\n    };\n    this.documentReleases.set(releaseId, updated);\n    return updated;\n  }\n\n  async cancelDocumentRelease(releaseId: string): Promise<void> {\n    const release = this.documentReleases.get(releaseId);\n    if (release) {\n      release.status = 'cancelled';\n      this.documentReleases.set(releaseId, release);\n    }\n  }\n\n  async getReleasedDocumentsForGroup(groupId: string): Promise<Document[]> {\n    const releasedReleases = Array.from(this.documentReleases.values()).filter(\n      release => release.groupId === groupId && release.status === 'released'\n    );\n    \n    const documentIds = releasedReleases.map(release => release.documentId);\n    return Array.from(this.documents.values()).filter(\n      doc => documentIds.includes(doc.id)\n    );\n  }\n\n  // Simulation Coordinator: Simulation Week Management\n  async createSimulationWeek(week: InsertSimulationWeek): Promise<SimulationWeek> {\n    const id = `week-${Date.now()}`;\n    const newWeek: SimulationWeek = {\n      id,\n      ...week,\n      active: false,\n      createdAt: new Date(),\n    };\n    this.simulationWeeks.set(id, newWeek);\n    return newWeek;\n  }\n\n  async getSimulationWeeks(sessionId: string): Promise<SimulationWeek[]> {\n    return Array.from(this.simulationWeeks.values()).filter(\n      week => week.sessionId === sessionId\n    );\n  }\n\n  async getActiveSimulationWeek(sessionId: string): Promise<SimulationWeek | undefined> {\n    return Array.from(this.simulationWeeks.values()).find(\n      week => week.sessionId === sessionId && week.active\n    );\n  }\n\n  async activateSimulationWeek(weekId: string): Promise<SimulationWeek> {\n    const week = this.simulationWeeks.get(weekId);\n    if (!week) {\n      throw new Error('Simulation week not found');\n    }\n\n    // Deactivate all other weeks for the same session\n    for (const [id, existingWeek] of this.simulationWeeks.entries()) {\n      if (existingWeek.sessionId === week.sessionId && existingWeek.active) {\n        existingWeek.active = false;\n        this.simulationWeeks.set(id, existingWeek);\n      }\n    }\n\n    // Activate the selected week\n    week.active = true;\n    this.simulationWeeks.set(weekId, week);\n    return week;\n  }\n\n  async updateSimulationWeek(id: string, updates: Partial<SimulationWeek>): Promise<SimulationWeek | undefined> {\n    const week = this.simulationWeeks.get(id);\n    if (!week) return undefined;\n\n    const updated: SimulationWeek = { ...week, ...updates };\n    this.simulationWeeks.set(id, updated);\n    return updated;\n  }\n\n  // System Admin: Audit Trail\n  async logActivity(log: InsertAuditLog): Promise<AuditLog> {\n    const id = `audit-${Date.now()}`;\n    const newLog: AuditLog = {\n      id,\n      ...log,\n      timestamp: new Date(),\n    };\n    this.auditLogs.set(id, newLog);\n    return newLog;\n  }\n\n  async getAuditLogs(entityType?: string, entityId?: string): Promise<AuditLog[]> {\n    let logs = Array.from(this.auditLogs.values());\n    \n    if (entityType) {\n      logs = logs.filter(log => log.entityType === entityType);\n    }\n    \n    if (entityId) {\n      logs = logs.filter(log => log.entityId === entityId);\n    }\n    \n    return logs.sort((a, b) => b.timestamp.getTime() - a.timestamp.getTime());\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":40049},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, boolean, integer, jsonb } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  role: text(\"role\").notNull(), // 'student', 'instructor', 'admin', 'coordinator'\n  firstName: text(\"first_name\").notNull(),\n  lastName: text(\"last_name\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const sessions = pgTable(\"sessions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  instructorId: varchar(\"instructor_id\").references(() => users.id).notNull(),\n  scenarioId: varchar(\"scenario_id\").references(() => scenarios.id),\n  active: boolean(\"active\").default(true),\n  timeRemaining: integer(\"time_remaining\"), // in minutes\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const sessionParticipants = pgTable(\"session_participants\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  sessionId: varchar(\"session_id\").references(() => sessions.id).notNull(),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  joinedAt: timestamp(\"joined_at\").defaultNow(),\n});\n\nexport const scenarios = pgTable(\"scenarios\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  createdBy: varchar(\"created_by\").references(() => users.id).notNull(),\n  timeline: jsonb(\"timeline\"), // Array of timed events\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const patients = pgTable(\"patients\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  mrn: text(\"mrn\").notNull().unique(),\n  firstName: text(\"first_name\").notNull(),\n  lastName: text(\"last_name\").notNull(),\n  dateOfBirth: text(\"date_of_birth\").notNull(),\n  gender: text(\"gender\").notNull(),\n  location: text(\"location\"),\n  status: text(\"status\").notNull(), // 'critical', 'stable', 'monitoring'\n  chiefComplaint: text(\"chief_complaint\"),\n  sessionId: varchar(\"session_id\").references(() => sessions.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const medicalHistory = pgTable(\"medical_history\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  patientId: varchar(\"patient_id\").references(() => patients.id).notNull(),\n  condition: text(\"condition\").notNull(),\n  diagnosedYear: text(\"diagnosed_year\"),\n  notes: text(\"notes\"),\n});\n\nexport const medications = pgTable(\"medications\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  patientId: varchar(\"patient_id\").references(() => patients.id).notNull(),\n  name: text(\"name\").notNull(),\n  dosage: text(\"dosage\").notNull(),\n  frequency: text(\"frequency\").notNull(),\n  prescribedBy: varchar(\"prescribed_by\").references(() => users.id),\n  prescribedAt: timestamp(\"prescribed_at\").defaultNow(),\n});\n\nexport const vitalSigns = pgTable(\"vital_signs\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  patientId: varchar(\"patient_id\").references(() => patients.id).notNull(),\n  bloodPressure: text(\"blood_pressure\"),\n  heartRate: integer(\"heart_rate\"),\n  respiratoryRate: integer(\"respiratory_rate\"),\n  temperature: text(\"temperature\"),\n  oxygenSaturation: integer(\"oxygen_saturation\"),\n  recordedAt: timestamp(\"recorded_at\").defaultNow(),\n  recordedBy: varchar(\"recorded_by\").references(() => users.id),\n});\n\nexport const labResults = pgTable(\"lab_results\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  patientId: varchar(\"patient_id\").references(() => patients.id).notNull(),\n  testName: text(\"test_name\").notNull(),\n  value: text(\"value\").notNull(),\n  unit: text(\"unit\"),\n  referenceRange: text(\"reference_range\"),\n  status: text(\"status\").default('completed'), // 'pending', 'completed'\n  orderedAt: timestamp(\"ordered_at\").defaultNow(),\n  completedAt: timestamp(\"completed_at\"),\n  orderedBy: varchar(\"ordered_by\").references(() => users.id),\n});\n\nexport const soapNotes = pgTable(\"soap_notes\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  patientId: varchar(\"patient_id\").references(() => patients.id).notNull(),\n  subjective: text(\"subjective\"),\n  objective: text(\"objective\"),\n  assessment: text(\"assessment\"),\n  plan: text(\"plan\"),\n  authorId: varchar(\"author_id\").references(() => users.id).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const orders = pgTable(\"orders\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  patientId: varchar(\"patient_id\").references(() => patients.id).notNull(),\n  type: text(\"type\").notNull(), // 'lab', 'imaging', 'medication'\n  orderText: text(\"order_text\").notNull(),\n  status: text(\"status\").default('pending'), // 'pending', 'completed', 'cancelled'\n  orderedBy: varchar(\"ordered_by\").references(() => users.id).notNull(),\n  orderedAt: timestamp(\"ordered_at\").defaultNow(),\n  completedAt: timestamp(\"completed_at\"),\n});\n\nexport const groups = pgTable(\"groups\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  sessionId: varchar(\"session_id\").references(() => sessions.id).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const groupMembers = pgTable(\"group_members\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  groupId: varchar(\"group_id\").references(() => groups.id).notNull(),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  joinedAt: timestamp(\"joined_at\").defaultNow(),\n});\n\nexport const assets = pgTable(\"assets\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  filename: text(\"filename\").notNull(),\n  type: text(\"type\").notNull(), // 'pdf', 'image', 'lab', 'document'\n  filePath: text(\"file_path\").notNull(),\n  sessionId: varchar(\"session_id\").references(() => sessions.id).notNull(),\n  uploadedBy: varchar(\"uploaded_by\").references(() => users.id).notNull(),\n  uploadedAt: timestamp(\"uploaded_at\").defaultNow(),\n});\n\nexport const assetGroupVisibility = pgTable(\"asset_group_visibility\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  assetId: varchar(\"asset_id\").references(() => assets.id).notNull(),\n  groupId: varchar(\"group_id\").references(() => groups.id).notNull(),\n  visible: boolean(\"visible\").default(false),\n  changedBy: varchar(\"changed_by\").references(() => users.id).notNull(),\n  changedAt: timestamp(\"changed_at\").defaultNow(),\n});\n\n// Data Versioning for Groups\nexport const dataVersions = pgTable(\"data_versions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  version: text(\"version\").notNull(),\n  sessionId: varchar(\"session_id\").references(() => sessions.id).notNull(),\n  createdBy: varchar(\"created_by\").references(() => users.id).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Group-specific patient assignments and data versions\nexport const groupDataAssignments = pgTable(\"group_data_assignments\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  groupId: varchar(\"group_id\").references(() => groups.id).notNull(),\n  dataVersionId: varchar(\"data_version_id\").references(() => dataVersions.id).notNull(),\n  patientId: varchar(\"patient_id\").references(() => patients.id).notNull(),\n  assignedBy: varchar(\"assigned_by\").references(() => users.id).notNull(),\n  assignedAt: timestamp(\"assigned_at\").defaultNow(),\n});\n\n// Group account credentials managed by System Admin\nexport const groupAccounts = pgTable(\"group_accounts\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  groupId: varchar(\"group_id\").references(() => groups.id).notNull(),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  active: boolean(\"active\").default(true),\n  createdBy: varchar(\"created_by\").references(() => users.id).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Documents uploaded and managed by Simulation Coordinators\nexport const documents = pgTable(\"documents\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  filename: text(\"filename\").notNull(),\n  originalName: text(\"original_name\").notNull(),\n  fileType: text(\"file_type\").notNull(),\n  fileSize: integer(\"file_size\").notNull(),\n  filePath: text(\"file_path\").notNull(),\n  category: text(\"category\").notNull(), // 'admission', 'lab', 'imaging', 'notes'\n  patientId: varchar(\"patient_id\").references(() => patients.id),\n  sessionId: varchar(\"session_id\").references(() => sessions.id).notNull(),\n  uploadedBy: varchar(\"uploaded_by\").references(() => users.id).notNull(),\n  uploadedAt: timestamp(\"uploaded_at\").defaultNow(),\n});\n\n// Scheduled document releases controlled by Simulation Coordinators\nexport const documentReleases = pgTable(\"document_releases\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  documentId: varchar(\"document_id\").references(() => documents.id).notNull(),\n  groupId: varchar(\"group_id\").references(() => groups.id).notNull(),\n  releaseType: text(\"release_type\").notNull(), // 'manual', 'scheduled'\n  scheduledAt: timestamp(\"scheduled_at\"),\n  releasedAt: timestamp(\"released_at\"),\n  releasedBy: varchar(\"released_by\").references(() => users.id),\n  status: text(\"status\").default('pending'), // 'pending', 'released', 'cancelled'\n  notes: text(\"notes\"),\n});\n\n// Simulation week configuration for timeline control\nexport const simulationWeeks = pgTable(\"simulation_weeks\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  weekNumber: integer(\"week_number\").notNull(),\n  startDate: timestamp(\"start_date\").notNull(),\n  endDate: timestamp(\"end_date\").notNull(),\n  sessionId: varchar(\"session_id\").references(() => sessions.id).notNull(),\n  timeline: jsonb(\"timeline\"), // Array of timed events and document releases\n  active: boolean(\"active\").default(false),\n  createdBy: varchar(\"created_by\").references(() => users.id).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Activity audit trail for System Admin oversight\nexport const auditLog = pgTable(\"audit_log\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  action: text(\"action\").notNull(),\n  entityType: text(\"entity_type\").notNull(), // 'user', 'group', 'document', 'patient'\n  entityId: varchar(\"entity_id\").notNull(),\n  performedBy: varchar(\"performed_by\").references(() => users.id).notNull(),\n  details: jsonb(\"details\"),\n  timestamp: timestamp(\"timestamp\").defaultNow(),\n});\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertSessionSchema = createInsertSchema(sessions).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertPatientSchema = createInsertSchema(patients).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertVitalSignsSchema = createInsertSchema(vitalSigns).omit({\n  id: true,\n  recordedAt: true,\n});\n\nexport const insertLabResultSchema = createInsertSchema(labResults).omit({\n  id: true,\n  orderedAt: true,\n});\n\nexport const insertSoapNoteSchema = createInsertSchema(soapNotes).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertOrderSchema = createInsertSchema(orders).omit({\n  id: true,\n  orderedAt: true,\n});\n\nexport const insertMedicalHistorySchema = createInsertSchema(medicalHistory).omit({\n  id: true,\n});\n\nexport const insertMedicationSchema = createInsertSchema(medications).omit({\n  id: true,\n  prescribedAt: true,\n});\n\nexport const insertGroupSchema = createInsertSchema(groups).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertGroupMemberSchema = createInsertSchema(groupMembers).omit({\n  id: true,\n  joinedAt: true,\n});\n\nexport const insertAssetSchema = createInsertSchema(assets).omit({\n  id: true,\n  uploadedAt: true,\n});\n\nexport const insertAssetGroupVisibilitySchema = createInsertSchema(assetGroupVisibility).omit({\n  id: true,\n  changedAt: true,\n});\n\nexport const insertDataVersionSchema = createInsertSchema(dataVersions).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertGroupDataAssignmentSchema = createInsertSchema(groupDataAssignments).omit({\n  id: true,\n  assignedAt: true,\n});\n\nexport const insertGroupAccountSchema = createInsertSchema(groupAccounts).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertDocumentSchema = createInsertSchema(documents).omit({\n  id: true,\n  uploadedAt: true,\n});\n\nexport const insertDocumentReleaseSchema = createInsertSchema(documentReleases).omit({\n  id: true,\n});\n\nexport const insertSimulationWeekSchema = createInsertSchema(simulationWeeks).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertAuditLogSchema = createInsertSchema(auditLog).omit({\n  id: true,\n  timestamp: true,\n});\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type Session = typeof sessions.$inferSelect;\nexport type InsertSession = z.infer<typeof insertSessionSchema>;\nexport type Patient = typeof patients.$inferSelect;\nexport type InsertPatient = z.infer<typeof insertPatientSchema>;\nexport type VitalSigns = typeof vitalSigns.$inferSelect;\nexport type InsertVitalSigns = z.infer<typeof insertVitalSignsSchema>;\nexport type LabResult = typeof labResults.$inferSelect;\nexport type InsertLabResult = z.infer<typeof insertLabResultSchema>;\nexport type SoapNote = typeof soapNotes.$inferSelect;\nexport type InsertSoapNote = z.infer<typeof insertSoapNoteSchema>;\nexport type Order = typeof orders.$inferSelect;\nexport type InsertOrder = z.infer<typeof insertOrderSchema>;\nexport type MedicalHistory = typeof medicalHistory.$inferSelect;\nexport type InsertMedicalHistory = z.infer<typeof insertMedicalHistorySchema>;\nexport type Medication = typeof medications.$inferSelect;\nexport type InsertMedication = z.infer<typeof insertMedicationSchema>;\nexport type Group = typeof groups.$inferSelect;\nexport type InsertGroup = z.infer<typeof insertGroupSchema>;\nexport type GroupMember = typeof groupMembers.$inferSelect;\nexport type InsertGroupMember = z.infer<typeof insertGroupMemberSchema>;\nexport type Asset = typeof assets.$inferSelect;\nexport type InsertAsset = z.infer<typeof insertAssetSchema>;\nexport type AssetGroupVisibility = typeof assetGroupVisibility.$inferSelect;\nexport type InsertAssetGroupVisibility = z.infer<typeof insertAssetGroupVisibilitySchema>;\n\nexport type DataVersion = typeof dataVersions.$inferSelect;\nexport type InsertDataVersion = z.infer<typeof insertDataVersionSchema>;\nexport type GroupDataAssignment = typeof groupDataAssignments.$inferSelect;\nexport type InsertGroupDataAssignment = z.infer<typeof insertGroupDataAssignmentSchema>;\nexport type GroupAccount = typeof groupAccounts.$inferSelect;\nexport type InsertGroupAccount = z.infer<typeof insertGroupAccountSchema>;\nexport type Document = typeof documents.$inferSelect;\nexport type InsertDocument = z.infer<typeof insertDocumentSchema>;\nexport type DocumentRelease = typeof documentReleases.$inferSelect;\nexport type InsertDocumentRelease = z.infer<typeof insertDocumentReleaseSchema>;\nexport type SimulationWeek = typeof simulationWeeks.$inferSelect;\nexport type InsertSimulationWeek = z.infer<typeof insertSimulationWeekSchema>;\nexport type AuditLog = typeof auditLog.$inferSelect;\nexport type InsertAuditLog = z.infer<typeof insertAuditLogSchema>;\n","size_bytes":15701},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { AuthProvider, useAuth } from \"@/hooks/use-auth\";\nimport Landing from \"@/pages/landing\";\nimport StudentDashboard from \"@/pages/student-dashboard\";\nimport InstructorDashboard from \"@/pages/instructor-dashboard\";\nimport AdminDashboard from \"@/pages/admin-dashboard\";\nimport CoordinatorDashboard from \"@/pages/coordinator-dashboard\";\nimport GroupManager from \"@/pages/group-manager\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction AppRouter() {\n  const { user, isLoading } = useAuth();\n\n  // Reduce loading time by checking localStorage immediately\n  if (isLoading) {\n    const storedUser = localStorage.getItem(\"user\");\n    if (storedUser) {\n      // If we have stored user, minimize loading screen time\n      return (\n        <div className=\"min-h-screen flex items-center justify-center\">\n          <div className=\"text-lg\">Loading...</div>\n        </div>\n      );\n    }\n    return <Landing />;\n  }\n\n  if (!user) {\n    return <Landing />;\n  }\n\n  const getDashboard = () => {\n    switch (user.role) {\n      case \"admin\":\n        return AdminDashboard;\n      case \"coordinator\":\n        return CoordinatorDashboard;\n      case \"instructor\":\n        return InstructorDashboard;\n      case \"student\":\n        return StudentDashboard;\n      default:\n        return StudentDashboard;\n    }\n  };\n\n  return (\n    <Switch>\n      <Route path=\"/\" component={getDashboard()} />\n      <Route path=\"/student\" component={StudentDashboard} />\n      <Route path=\"/instructor\" component={InstructorDashboard} />\n      <Route path=\"/admin\" component={AdminDashboard} />\n      <Route path=\"/coordinator\" component={CoordinatorDashboard} />\n      <Route path=\"/group-manager\" component={GroupManager} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <AuthProvider>\n        <TooltipProvider>\n          <Toaster />\n          <AppRouter />\n        </TooltipProvider>\n      </AuthProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2287},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(210 25% 7.8431%);\n  --card: hsl(180 6.6667% 97.0588%);\n  --card-foreground: hsl(210 25% 7.8431%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(210 25% 7.8431%);\n  --primary: hsl(207 100% 36%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(210 25% 7.8431%);\n  --secondary-foreground: hsl(0 0% 100%);\n  --muted: hsl(240 1.9608% 90%);\n  --muted-foreground: hsl(210 25% 7.8431%);\n  --accent: hsl(211.5789 51.3514% 92.7451%);\n  --accent-foreground: hsl(203.8863 88.2845% 53.1373%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(201.4286 30.4348% 90.9804%);\n  --input: hsl(200 23.0769% 97.4510%);\n  --ring: hsl(202.8169 89.1213% 53.1373%);\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  \n  /* Hospital theme colors */\n  --hospital-blue: hsl(207 100% 36%);\n  --success-green: hsl(73 100% 37%);\n  --alert-yellow: hsl(45 98% 58%);\n  --critical-red: hsl(356 67% 51%);\n  --bg-light: hsl(0 0% 95.7%);\n  \n  --font-sans: 'Inter', sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.5rem;\n}\n\n.dark {\n  --background: hsl(0 0% 0%);\n  --foreground: hsl(200 6.6667% 91.1765%);\n  --card: hsl(228 9.8039% 10%);\n  --card-foreground: hsl(0 0% 85.0980%);\n  --popover: hsl(0 0% 0%);\n  --popover-foreground: hsl(200 6.6667% 91.1765%);\n  --primary: hsl(207 100% 36%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(195.0000 15.3846% 94.9020%);\n  --secondary-foreground: hsl(210 25% 7.8431%);\n  --muted: hsl(0 0% 9.4118%);\n  --muted-foreground: hsl(210 3.3898% 46.2745%);\n  --accent: hsl(205.7143 70% 7.8431%);\n  --accent-foreground: hsl(203.7736 87.6033% 52.5490%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(210 5.2632% 14.9020%);\n  --input: hsl(207.6923 27.6596% 18.4314%);\n  --ring: hsl(202.8169 89.1213% 53.1373%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-bg-light text-foreground;\n  }\n}\n\n@layer utilities {\n  .hospital-blue {\n    @apply text-[#005EB8];\n  }\n  \n  .bg-hospital-blue {\n    @apply bg-[#005EB8];\n  }\n  \n  .success-green {\n    @apply text-[#7FBA00];\n  }\n  \n  .bg-success-green {\n    @apply bg-[#7FBA00];\n  }\n  \n  .alert-yellow {\n    @apply text-[#FBC02D];\n  }\n  \n  .bg-alert-yellow {\n    @apply bg-[#FBC02D];\n  }\n  \n  .critical-red {\n    @apply text-[#D32F2F];\n  }\n  \n  .bg-critical-red {\n    @apply bg-[#D32F2F];\n  }\n  \n  .bg-light {\n    @apply bg-[#F4F4F4];\n  }\n}\n","size_bytes":2920},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/instructor-controls.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { X, Plus, Clock } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface InstructorControlsProps {\n  patientId: string;\n  isVisible: boolean;\n  onClose: () => void;\n}\n\nexport default function InstructorControls({ patientId, isVisible, onClose }: InstructorControlsProps) {\n  const [patientCondition, setPatientCondition] = useState(\"stable\");\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const releaseTroponinMutation = useMutation({\n    mutationFn: async () => {\n      // Find the pending troponin lab result and release it\n      const response = await apiRequest(\"PATCH\", \"/api/lab-results/lab-2\", {\n        value: \"0.08\",\n        status: \"completed\",\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/patients\", patientId, \"labs\"] });\n      toast({\n        title: \"Lab Result Released\",\n        description: \"Troponin results are now available to students.\",\n        variant: \"default\",\n      });\n    },\n  });\n\n  const updatePatientMutation = useMutation({\n    mutationFn: async (status: string) => {\n      const response = await apiRequest(\"PATCH\", `/api/patients/${patientId}`, {\n        status,\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/patients\", patientId] });\n      toast({\n        title: \"Patient Status Updated\",\n        description: \"Patient condition has been updated.\",\n        variant: \"default\",\n      });\n    },\n  });\n\n  const handleConditionChange = (condition: string) => {\n    setPatientCondition(condition);\n    updatePatientMutation.mutate(condition);\n  };\n\n  if (!isVisible) return null;\n\n  return (\n    <div className=\"fixed bottom-6 right-6 w-80 z-50\">\n      <Card className=\"shadow-xl\">\n        <CardHeader className=\"pb-3\">\n          <div className=\"flex items-center justify-between\">\n            <CardTitle className=\"text-sm font-semibold text-gray-900\">\n              Instructor Controls\n            </CardTitle>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={onClose}\n              className=\"h-6 w-6 p-0 text-gray-400 hover:text-gray-600\"\n            >\n              <X className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        </CardHeader>\n        <CardContent className=\"space-y-3\">\n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-sm text-gray-600\">Release Troponin Results</span>\n            <Button\n              onClick={() => releaseTroponinMutation.mutate()}\n              disabled={releaseTroponinMutation.isPending}\n              size=\"sm\"\n              className=\"bg-alert-yellow hover:bg-alert-yellow/90 text-white\"\n            >\n              {releaseTroponinMutation.isPending ? \"Releasing...\" : \"Release Now\"}\n            </Button>\n          </div>\n          \n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-sm text-gray-600\">Patient Condition</span>\n            <Select value={patientCondition} onValueChange={handleConditionChange}>\n              <SelectTrigger className=\"w-28\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"stable\">Stable</SelectItem>\n                <SelectItem value=\"critical\">Critical</SelectItem>\n                <SelectItem value=\"monitoring\">Monitoring</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n          \n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-sm text-gray-600\">Student Progress</span>\n            <span className=\"text-xs bg-success-green/10 text-green-800 px-2 py-1 rounded\">\n              On Track\n            </span>\n          </div>\n          \n          <Button\n            className=\"w-full bg-hospital-blue hover:bg-hospital-blue/90\"\n            size=\"sm\"\n          >\n            <Plus className=\"h-4 w-4 mr-2\" />\n            Add Scenario Event\n          </Button>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":4546},"client/src/components/notification-toast.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { CheckCircle, AlertTriangle, XCircle, X } from \"lucide-react\";\n\ninterface Notification {\n  id: string;\n  type: \"success\" | \"warning\" | \"error\";\n  message: string;\n}\n\ninterface NotificationToastProps {\n  notifications: Notification[];\n  onDismiss: (id: string) => void;\n}\n\nexport default function NotificationToast({ notifications, onDismiss }: NotificationToastProps) {\n  const [visibleNotifications, setVisibleNotifications] = useState<Notification[]>([]);\n\n  useEffect(() => {\n    setVisibleNotifications(notifications);\n  }, [notifications]);\n\n  const getNotificationStyles = (type: string) => {\n    switch (type) {\n      case \"success\":\n        return \"bg-success-green text-white\";\n      case \"warning\":\n        return \"bg-alert-yellow text-white\";\n      case \"error\":\n        return \"bg-critical-red text-white\";\n      default:\n        return \"bg-gray-600 text-white\";\n    }\n  };\n\n  const getNotificationIcon = (type: string) => {\n    switch (type) {\n      case \"success\":\n        return CheckCircle;\n      case \"warning\":\n        return AlertTriangle;\n      case \"error\":\n        return XCircle;\n      default:\n        return CheckCircle;\n    }\n  };\n\n  if (visibleNotifications.length === 0) return null;\n\n  return (\n    <div className=\"fixed top-20 right-6 z-50 space-y-3\">\n      {visibleNotifications.map((notification) => {\n        const Icon = getNotificationIcon(notification.type);\n        return (\n          <div\n            key={notification.id}\n            className={`px-4 py-3 rounded-md shadow-lg flex items-center max-w-sm ${getNotificationStyles(notification.type)}`}\n          >\n            <Icon className=\"h-5 w-5 mr-3 flex-shrink-0\" />\n            <span className=\"flex-1 text-sm\">{notification.message}</span>\n            <button\n              onClick={() => onDismiss(notification.id)}\n              className=\"ml-3 text-white/80 hover:text-white flex-shrink-0\"\n            >\n              <X className=\"h-4 w-4\" />\n            </button>\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n","size_bytes":2074},"client/src/components/orders-form.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { Button } from \"@/components/ui/button\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Send } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface OrdersFormProps {\n  patientId: string;\n}\n\nexport default function OrdersForm({ patientId }: OrdersFormProps) {\n  const [selectedLabOrders, setSelectedLabOrders] = useState<string[]>([]);\n  const [selectedImagingOrders, setSelectedImagingOrders] = useState<string[]>([]);\n  const [selectedMedication, setSelectedMedication] = useState(\"\");\n  const [medicationInstructions, setMedicationInstructions] = useState(\"\");\n  \n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const labOptions = [\n    \"CBC with Differential\",\n    \"Basic Metabolic Panel\",\n    \"Arterial Blood Gas\",\n    \"Troponin I\",\n    \"D-Dimer\",\n    \"PT/INR\",\n  ];\n\n  const imagingOptions = [\n    \"Chest X-ray\",\n    \"ECG\",\n    \"CT Chest with contrast\",\n    \"Echocardiogram\",\n    \"CT Angiogram\",\n  ];\n\n  const medicationOptions = [\n    \"Nitroglycerin 0.4mg SL PRN\",\n    \"Aspirin 325mg PO once\",\n    \"Metoprolol 25mg PO BID\",\n    \"Furosemide 40mg IV\",\n    \"Morphine 2mg IV PRN\",\n  ];\n\n  const createOrderMutation = useMutation({\n    mutationFn: async (data: {\n      type: string;\n      orderText: string;\n      orderedBy: string;\n    }) => {\n      const response = await apiRequest(\"POST\", `/api/patients/${patientId}/orders`, data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/patients\", patientId, \"orders\"] });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to submit order. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleLabOrderChange = (orderText: string, checked: boolean) => {\n    if (checked) {\n      setSelectedLabOrders(prev => [...prev, orderText]);\n    } else {\n      setSelectedLabOrders(prev => prev.filter(order => order !== orderText));\n    }\n  };\n\n  const handleImagingOrderChange = (orderText: string, checked: boolean) => {\n    if (checked) {\n      setSelectedImagingOrders(prev => [...prev, orderText]);\n    } else {\n      setSelectedImagingOrders(prev => prev.filter(order => order !== orderText));\n    }\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!user) return;\n\n    const orders = [];\n\n    // Add lab orders\n    selectedLabOrders.forEach(order => {\n      orders.push({\n        type: \"lab\",\n        orderText: order,\n        orderedBy: user.id,\n      });\n    });\n\n    // Add imaging orders\n    selectedImagingOrders.forEach(order => {\n      orders.push({\n        type: \"imaging\",\n        orderText: order,\n        orderedBy: user.id,\n      });\n    });\n\n    // Add medication order\n    if (selectedMedication) {\n      const medicationOrder = medicationInstructions \n        ? `${selectedMedication} - ${medicationInstructions}`\n        : selectedMedication;\n      orders.push({\n        type: \"medication\",\n        orderText: medicationOrder,\n        orderedBy: user.id,\n      });\n    }\n\n    if (orders.length === 0) {\n      toast({\n        title: \"No Orders Selected\",\n        description: \"Please select at least one order to submit.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    try {\n      await Promise.all(orders.map(order => createOrderMutation.mutateAsync(order)));\n      \n      toast({\n        title: \"Success\",\n        description: `${orders.length} order(s) submitted successfully!`,\n        variant: \"default\",\n      });\n\n      // Clear form\n      setSelectedLabOrders([]);\n      setSelectedImagingOrders([]);\n      setSelectedMedication(\"\");\n      setMedicationInstructions(\"\");\n    } catch (error) {\n      // Error handling is done in the mutation\n    }\n  };\n\n  return (\n    <div className=\"bg-white rounded-lg shadow-sm border border-gray-200 p-6\">\n      <h3 className=\"text-md font-medium text-gray-800 mb-4\">Place Orders</h3>\n      <form onSubmit={handleSubmit} className=\"space-y-6\">\n        {/* Laboratory Orders */}\n        <div>\n          <Label className=\"text-sm font-medium text-gray-700 mb-2 block\">\n            Laboratory Orders\n          </Label>\n          <div className=\"space-y-2\">\n            {labOptions.map(option => (\n              <div key={option} className=\"flex items-center space-x-2\">\n                <Checkbox\n                  id={`lab-${option}`}\n                  checked={selectedLabOrders.includes(option)}\n                  onCheckedChange={(checked) => handleLabOrderChange(option, checked as boolean)}\n                />\n                <Label htmlFor={`lab-${option}`} className=\"text-sm text-gray-700\">\n                  {option}\n                </Label>\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {/* Imaging Orders */}\n        <div>\n          <Label className=\"text-sm font-medium text-gray-700 mb-2 block\">\n            Imaging Orders\n          </Label>\n          <div className=\"space-y-2\">\n            {imagingOptions.map(option => (\n              <div key={option} className=\"flex items-center space-x-2\">\n                <Checkbox\n                  id={`imaging-${option}`}\n                  checked={selectedImagingOrders.includes(option)}\n                  onCheckedChange={(checked) => handleImagingOrderChange(option, checked as boolean)}\n                />\n                <Label htmlFor={`imaging-${option}`} className=\"text-sm text-gray-700\">\n                  {option}\n                </Label>\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {/* Medication Orders */}\n        <div>\n          <Label className=\"text-sm font-medium text-gray-700 mb-1 block\">\n            Medication Orders\n          </Label>\n          <Select value={selectedMedication} onValueChange={setSelectedMedication}>\n            <SelectTrigger className=\"w-full mb-2\">\n              <SelectValue placeholder=\"Select medication...\" />\n            </SelectTrigger>\n            <SelectContent>\n              {medicationOptions.map(option => (\n                <SelectItem key={option} value={option}>\n                  {option}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n          <Input\n            value={medicationInstructions}\n            onChange={(e) => setMedicationInstructions(e.target.value)}\n            placeholder=\"Special instructions...\"\n            className=\"w-full\"\n          />\n        </div>\n\n        <Button\n          type=\"submit\"\n          className=\"w-full bg-success-green hover:bg-success-green/90\"\n          disabled={createOrderMutation.isPending}\n        >\n          <Send className=\"h-4 w-4 mr-2\" />\n          {createOrderMutation.isPending ? \"Submitting...\" : \"Submit Orders\"}\n        </Button>\n      </form>\n    </div>\n  );\n}\n","size_bytes":7274},"client/src/components/patient-header.tsx":{"content":"import { MapPin, AlertCircle } from \"lucide-react\";\nimport type { Patient } from \"@shared/schema\";\n\ninterface PatientHeaderProps {\n  patient: Patient;\n}\n\nexport default function PatientHeader({ patient }: PatientHeaderProps) {\n  const calculateAge = (dateOfBirth: string) => {\n    const today = new Date();\n    const birthDate = new Date(dateOfBirth);\n    let age = today.getFullYear() - birthDate.getFullYear();\n    const monthDiff = today.getMonth() - birthDate.getMonth();\n    if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birthDate.getDate())) {\n      age--;\n    }\n    return age;\n  };\n\n  const formatDate = (dateString: string) => {\n    const date = new Date(dateString);\n    return date.toLocaleDateString(\"en-US\", {\n      month: \"2-digit\",\n      day: \"2-digit\",\n      year: \"numeric\",\n    });\n  };\n\n  const getStatusDisplay = (status: string) => {\n    switch (status) {\n      case \"critical\":\n        return {\n          label: \"Critical Status\",\n          className: \"bg-critical-red/10 text-critical-red border-critical-red/20\",\n          icon: AlertCircle,\n        };\n      case \"stable\":\n        return {\n          label: \"Stable\",\n          className: \"bg-success-green/10 text-success-green border-success-green/20\",\n          icon: null,\n        };\n      case \"monitoring\":\n        return {\n          label: \"Monitoring\",\n          className: \"bg-alert-yellow/20 text-orange-800 border-orange-200\",\n          icon: null,\n        };\n      default:\n        return {\n          label: status,\n          className: \"bg-gray-100 text-gray-800 border-gray-200\",\n          icon: null,\n        };\n    }\n  };\n\n  const statusDisplay = getStatusDisplay(patient.status);\n  const StatusIcon = statusDisplay.icon;\n\n  return (\n    <div className=\"bg-white border-b border-gray-200 px-6 py-4\">\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-4\">\n          <div>\n            <h1 className=\"text-xl font-semibold text-gray-900\">\n              {patient.firstName} {patient.lastName}\n            </h1>\n            <div className=\"flex items-center space-x-4 text-sm text-gray-500\">\n              <span>MRN: {patient.mrn}</span>\n              <span>DOB: {formatDate(patient.dateOfBirth)}</span>\n              <span>{calculateAge(patient.dateOfBirth)} years old</span>\n              <span>{patient.gender}</span>\n            </div>\n          </div>\n        </div>\n        \n        <div className=\"flex items-center space-x-3\">\n          <div className=\"flex items-center space-x-2 text-sm\">\n            <MapPin className=\"h-4 w-4 text-gray-400\" />\n            <span>{patient.location}</span>\n          </div>\n          <span className={`inline-flex items-center px-3 py-1 rounded-full text-sm font-medium border ${statusDisplay.className}`}>\n            {StatusIcon && <StatusIcon className=\"h-4 w-4 mr-1\" />}\n            {statusDisplay.label}\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":2971},"client/src/components/patient-list.tsx":{"content":"import { User } from \"lucide-react\";\nimport type { Patient } from \"@shared/schema\";\n\ninterface PatientListProps {\n  patients: Patient[];\n  selectedPatientId?: string;\n  onPatientSelect: (patientId: string) => void;\n}\n\nexport default function PatientList({ patients, selectedPatientId, onPatientSelect }: PatientListProps) {\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"critical\":\n        return \"bg-critical-red/10 text-critical-red\";\n      case \"stable\":\n        return \"bg-success-green/10 text-success-green\";\n      case \"monitoring\":\n        return \"bg-alert-yellow/20 text-orange-800\";\n      default:\n        return \"bg-gray-100 text-gray-800\";\n    }\n  };\n\n  const getStatusLabel = (status: string) => {\n    switch (status) {\n      case \"critical\":\n        return \"Critical\";\n      case \"stable\":\n        return \"Stable\";\n      case \"monitoring\":\n        return \"Monitoring\";\n      default:\n        return status;\n    }\n  };\n\n  const calculateAge = (dateOfBirth: string) => {\n    const today = new Date();\n    const birthDate = new Date(dateOfBirth);\n    let age = today.getFullYear() - birthDate.getFullYear();\n    const monthDiff = today.getMonth() - birthDate.getMonth();\n    if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birthDate.getDate())) {\n      age--;\n    }\n    return age;\n  };\n\n  return (\n    <div className=\"w-80 bg-white border-r border-gray-200 flex flex-col\">\n      <div className=\"p-4 border-b border-gray-200\">\n        <h2 className=\"text-lg font-semibold text-gray-900\">Patient List</h2>\n        <p className=\"text-sm text-gray-500\">Select a patient to view records</p>\n      </div>\n      \n      <div className=\"flex-1 overflow-y-auto\">\n        {patients.map((patient) => (\n          <div\n            key={patient.id}\n            onClick={() => onPatientSelect(patient.id)}\n            className={`p-4 border-b border-gray-100 hover:bg-gray-50 cursor-pointer transition-colors ${\n              selectedPatientId === patient.id ? \"bg-hospital-blue/5 border-hospital-blue/20\" : \"\"\n            }`}\n          >\n            <div className=\"flex items-start space-x-3\">\n              <div className=\"w-10 h-10 bg-hospital-blue/10 rounded-full flex items-center justify-center flex-shrink-0\">\n                <User className=\"h-5 w-5 text-hospital-blue\" />\n              </div>\n              <div className=\"flex-1 min-w-0\">\n                <div className=\"flex items-center justify-between\">\n                  <h3 className=\"text-sm font-medium text-gray-900 truncate\">\n                    {patient.firstName} {patient.lastName}\n                  </h3>\n                  <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${getStatusColor(patient.status)}`}>\n                    {getStatusLabel(patient.status)}\n                  </span>\n                </div>\n                <p className=\"text-xs text-gray-500\">MRN: {patient.mrn}</p>\n                <div className=\"flex items-center space-x-4 mt-1\">\n                  <span className=\"text-xs text-gray-500\">{calculateAge(patient.dateOfBirth)}y</span>\n                  <span className=\"text-xs text-gray-500\">{patient.gender}</span>\n                  <span className=\"text-xs text-gray-500\">{patient.location}</span>\n                </div>\n                {patient.status === \"critical\" && (\n                  <div className=\"mt-2 flex items-center space-x-2\">\n                    <span className=\"inline-flex items-center px-2 py-1 rounded text-xs font-medium bg-alert-yellow/20 text-orange-800\">\n                      New Lab Results\n                    </span>\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n","size_bytes":3765},"client/src/components/patient-overview.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Clock, AlertTriangle, CheckCircle, User, Calendar } from \"lucide-react\";\nimport type { Patient, VitalSigns, LabResult, MedicalHistory, Medication, SoapNote } from \"@shared/schema\";\n\ninterface PatientOverviewProps {\n  patient: Patient;\n}\n\nexport default function PatientOverview({ patient }: PatientOverviewProps) {\n  const [activeTab, setActiveTab] = useState(\"overview\");\n\n  const { data: vitals } = useQuery<VitalSigns>({\n    queryKey: [\"/api/patients\", patient.id, \"vitals\"],\n  });\n\n  const { data: labResults } = useQuery<LabResult[]>({\n    queryKey: [\"/api/patients\", patient.id, \"labs\"],\n  });\n\n  const { data: medicalHistory } = useQuery<MedicalHistory[]>({\n    queryKey: [\"/api/patients\", patient.id, \"history\"],\n  });\n\n  const { data: medications } = useQuery<Medication[]>({\n    queryKey: [\"/api/patients\", patient.id, \"medications\"],\n  });\n\n  const { data: soapNotes } = useQuery<SoapNote[]>({\n    queryKey: [\"/api/patients\", patient.id, \"soap-notes\"],\n  });\n\n  const getVitalStatus = (value: number | string | null, normal: { min?: number; max?: number }) => {\n    if (typeof value !== \"number\") return \"normal\";\n    if (normal.min && value < normal.min) return \"low\";\n    if (normal.max && value > normal.max) return \"high\";\n    return \"normal\";\n  };\n\n  const getVitalColor = (status: string) => {\n    switch (status) {\n      case \"high\":\n        return \"text-critical-red\";\n      case \"low\":\n        return \"text-alert-yellow\";\n      default:\n        return \"text-gray-900\";\n    }\n  };\n\n  const tabs = [\n    { id: \"overview\", label: \"Overview\" },\n    { id: \"vitals\", label: \"Vitals & Monitoring\" },\n    { id: \"labs\", label: \"Laboratory Results\" },\n    { id: \"medications\", label: \"Medications\" },\n    { id: \"orders\", label: \"Orders\" },\n    { id: \"notes\", label: \"Notes\" },\n    { id: \"imaging\", label: \"Imaging\" },\n  ];\n\n  return (\n    <div className=\"flex-1 flex flex-col overflow-hidden\">\n      {/* Tab Navigation */}\n      <div className=\"bg-white border-b border-gray-200\">\n        <nav className=\"flex space-x-8 px-6\" aria-label=\"Tabs\">\n          {tabs.map((tab) => (\n            <button\n              key={tab.id}\n              onClick={() => setActiveTab(tab.id)}\n              className={`border-b-2 py-3 px-1 text-sm font-medium transition-colors ${\n                activeTab === tab.id\n                  ? \"border-hospital-blue text-hospital-blue\"\n                  : \"border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300\"\n              }`}\n            >\n              {tab.label}\n            </button>\n          ))}\n        </nav>\n      </div>\n\n      {/* Tab Content */}\n      <div className=\"flex-1 overflow-y-auto bg-bg-light p-6\">\n        <div className=\"max-w-7xl mx-auto space-y-6\">\n          {activeTab === \"overview\" && (\n            <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n              {/* Chief Complaint */}\n              <div className=\"lg:col-span-2 bg-white rounded-lg shadow-sm border border-gray-200\">\n                <div className=\"p-6\">\n                  <div className=\"flex items-center justify-between mb-4\">\n                    <h2 className=\"text-lg font-semibold text-gray-900\">Chief Complaint</h2>\n                    <span className=\"text-sm text-gray-500\">Today, 2:45 PM</span>\n                  </div>\n                  <div className=\"space-y-3\">\n                    <p className=\"text-gray-800\">{patient.chiefComplaint}</p>\n                    <div className=\"grid grid-cols-2 gap-4 mt-4\">\n                      <div>\n                        <label className=\"text-sm font-medium text-gray-700\">Onset</label>\n                        <p className=\"text-sm text-gray-600\">2 hours ago, sudden</p>\n                      </div>\n                      <div>\n                        <label className=\"text-sm font-medium text-gray-700\">Pain Scale</label>\n                        <p className=\"text-sm text-gray-600\">8/10</p>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              {/* Vital Signs */}\n              <div className=\"bg-white rounded-lg shadow-sm border border-gray-200\">\n                <div className=\"p-6\">\n                  <div className=\"flex items-center justify-between mb-4\">\n                    <h2 className=\"text-lg font-semibold text-gray-900\">Current Vitals</h2>\n                    <span className=\"text-xs bg-success-green/10 text-green-800 px-2 py-1 rounded-full\">\n                      Updated 5 min ago\n                    </span>\n                  </div>\n                  <div className=\"space-y-4\">\n                    {vitals && (\n                      <>\n                        <div className=\"flex items-center justify-between\">\n                          <span className=\"text-sm text-gray-600\">Blood Pressure</span>\n                          <span className=\"text-sm font-semibold text-critical-red\">\n                            {vitals.bloodPressure}\n                          </span>\n                        </div>\n                        <div className=\"flex items-center justify-between\">\n                          <span className=\"text-sm text-gray-600\">Heart Rate</span>\n                          <span className={`text-sm font-semibold ${getVitalColor(getVitalStatus(vitals.heartRate, { max: 100 }))}`}>\n                            {vitals.heartRate} bpm\n                          </span>\n                        </div>\n                        <div className=\"flex items-center justify-between\">\n                          <span className=\"text-sm text-gray-600\">Respiratory Rate</span>\n                          <span className={`text-sm font-semibold ${getVitalColor(getVitalStatus(vitals.respiratoryRate, { max: 20 }))}`}>\n                            {vitals.respiratoryRate}/min\n                          </span>\n                        </div>\n                        <div className=\"flex items-center justify-between\">\n                          <span className=\"text-sm text-gray-600\">Temperature</span>\n                          <span className=\"text-sm font-semibold text-gray-900\">\n                            {vitals.temperature}\n                          </span>\n                        </div>\n                        <div className=\"flex items-center justify-between\">\n                          <span className=\"text-sm text-gray-600\">SpO2</span>\n                          <span className={`text-sm font-semibold ${getVitalColor(getVitalStatus(vitals.oxygenSaturation, { min: 95 }))}`}>\n                            {vitals.oxygenSaturation}%\n                          </span>\n                        </div>\n                      </>\n                    )}\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {activeTab === \"overview\" && (\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              {/* Medical History */}\n              <div className=\"bg-white rounded-lg shadow-sm border border-gray-200\">\n                <div className=\"p-6\">\n                  <h2 className=\"text-lg font-semibold text-gray-900 mb-4\">Medical History</h2>\n                  <div className=\"space-y-3\">\n                    {medicalHistory?.map((history) => (\n                      <div key={history.id} className=\"flex items-center justify-between\">\n                        <span className=\"text-sm text-gray-800\">{history.condition}</span>\n                        <span className=\"text-xs text-gray-500\">{history.diagnosedYear}</span>\n                      </div>\n                    ))}\n                  </div>\n                  \n                  <div className=\"mt-6\">\n                    <h3 className=\"text-sm font-medium text-gray-700 mb-2\">Current Medications</h3>\n                    <div className=\"space-y-2\">\n                      {medications?.map((medication) => (\n                        <div key={medication.id} className=\"text-sm text-gray-600\">\n                          • {medication.name} {medication.dosage} {medication.frequency}\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              {/* Lab Results */}\n              <div className=\"bg-white rounded-lg shadow-sm border border-gray-200\">\n                <div className=\"p-6\">\n                  <div className=\"flex items-center justify-between mb-4\">\n                    <h2 className=\"text-lg font-semibold text-gray-900\">Recent Lab Results</h2>\n                    {labResults?.some(lab => lab.status === 'pending') && (\n                      <span className=\"text-xs bg-alert-yellow/20 text-orange-800 px-2 py-1 rounded-full flex items-center\">\n                        <Clock className=\"h-3 w-3 mr-1\" />\n                        Pending: Troponin\n                      </span>\n                    )}\n                  </div>\n                  <div className=\"space-y-3\">\n                    {labResults?.map((lab) => (\n                      <div key={lab.id}>\n                        {lab.status === 'completed' ? (\n                          <div className=\"flex items-center justify-between\">\n                            <span className=\"text-sm text-gray-600\">{lab.testName}</span>\n                            <span className=\"text-sm font-semibold text-gray-900\">\n                              {lab.value} {lab.unit}\n                            </span>\n                          </div>\n                        ) : (\n                          <div className=\"p-3 bg-alert-yellow/10 border border-alert-yellow/20 rounded-md\">\n                            <div className=\"flex items-center\">\n                              <Clock className=\"h-4 w-4 text-alert-yellow mr-2\" />\n                              <span className=\"text-sm font-medium text-orange-800\">\n                                {lab.testName} results pending\n                              </span>\n                            </div>\n                            <p className=\"text-xs text-orange-700 mt-1\">Expected in 15 minutes</p>\n                          </div>\n                        )}\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* Vitals & Monitoring Tab */}\n          {activeTab === \"vitals\" && (\n            <div className=\"space-y-6\">\n              <div className=\"bg-white rounded-lg shadow-sm border border-gray-200\">\n                <div className=\"p-6\">\n                  <div className=\"flex items-center justify-between mb-6\">\n                    <h2 className=\"text-xl font-semibold text-gray-900\">Vital Signs Monitoring</h2>\n                    <span className=\"text-xs bg-success-green/10 text-green-800 px-3 py-1 rounded-full\">\n                      Live Monitoring\n                    </span>\n                  </div>\n                  {vitals && (\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                      <div className=\"bg-gray-50 p-4 rounded-lg\">\n                        <div className=\"flex items-center justify-between mb-2\">\n                          <span className=\"text-sm font-medium text-gray-700\">Blood Pressure</span>\n                          <span className=\"text-xs text-gray-500\">mmHg</span>\n                        </div>\n                        <div className=\"text-2xl font-bold text-critical-red\">{vitals.bloodPressure}</div>\n                        <div className=\"text-xs text-gray-500 mt-1\">Hypertensive Range</div>\n                      </div>\n                      <div className=\"bg-gray-50 p-4 rounded-lg\">\n                        <div className=\"flex items-center justify-between mb-2\">\n                          <span className=\"text-sm font-medium text-gray-700\">Heart Rate</span>\n                          <span className=\"text-xs text-gray-500\">bpm</span>\n                        </div>\n                        <div className={`text-2xl font-bold ${getVitalColor(getVitalStatus(vitals.heartRate, { max: 100 }))}`}>\n                          {vitals.heartRate}\n                        </div>\n                        <div className=\"text-xs text-gray-500 mt-1\">Tachycardic</div>\n                      </div>\n                      <div className=\"bg-gray-50 p-4 rounded-lg\">\n                        <div className=\"flex items-center justify-between mb-2\">\n                          <span className=\"text-sm font-medium text-gray-700\">Respiratory Rate</span>\n                          <span className=\"text-xs text-gray-500\">/min</span>\n                        </div>\n                        <div className={`text-2xl font-bold ${getVitalColor(getVitalStatus(vitals.respiratoryRate, { max: 20 }))}`}>\n                          {vitals.respiratoryRate}\n                        </div>\n                        <div className=\"text-xs text-gray-500 mt-1\">Tachypneic</div>\n                      </div>\n                      <div className=\"bg-gray-50 p-4 rounded-lg\">\n                        <div className=\"flex items-center justify-between mb-2\">\n                          <span className=\"text-sm font-medium text-gray-700\">Temperature</span>\n                          <span className=\"text-xs text-gray-500\">°F</span>\n                        </div>\n                        <div className=\"text-2xl font-bold text-gray-900\">{vitals.temperature}</div>\n                        <div className=\"text-xs text-gray-500 mt-1\">Normal</div>\n                      </div>\n                      <div className=\"bg-gray-50 p-4 rounded-lg\">\n                        <div className=\"flex items-center justify-between mb-2\">\n                          <span className=\"text-sm font-medium text-gray-700\">Oxygen Saturation</span>\n                          <span className=\"text-xs text-gray-500\">%</span>\n                        </div>\n                        <div className={`text-2xl font-bold ${getVitalColor(getVitalStatus(vitals.oxygenSaturation, { min: 95 }))}`}>\n                          {vitals.oxygenSaturation}\n                        </div>\n                        <div className=\"text-xs text-gray-500 mt-1\">Hypoxic</div>\n                      </div>\n                    </div>\n                  )}\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* Laboratory Results Tab */}\n          {activeTab === \"labs\" && (\n            <div className=\"space-y-6\">\n              <div className=\"bg-white rounded-lg shadow-sm border border-gray-200\">\n                <div className=\"p-6\">\n                  <div className=\"flex items-center justify-between mb-6\">\n                    <h2 className=\"text-xl font-semibold text-gray-900\">Laboratory Results</h2>\n                    {labResults?.some(lab => lab.status === 'pending') && (\n                      <span className=\"text-sm bg-alert-yellow/20 text-orange-800 px-3 py-1 rounded-full flex items-center\">\n                        <Clock className=\"h-4 w-4 mr-1\" />\n                        Pending Results\n                      </span>\n                    )}\n                  </div>\n                  <div className=\"space-y-4\">\n                    {labResults?.map((lab) => (\n                      <div key={lab.id} className=\"border rounded-lg p-4\">\n                        <div className=\"flex items-center justify-between mb-2\">\n                          <h3 className=\"font-medium text-gray-900\">{lab.testName}</h3>\n                          <span className={`px-2 py-1 text-xs rounded-full ${\n                            lab.status === 'completed' \n                              ? 'bg-green-100 text-green-800' \n                              : 'bg-yellow-100 text-yellow-800'\n                          }`}>\n                            {lab.status}\n                          </span>\n                        </div>\n                        {lab.status === 'completed' ? (\n                          <div className=\"space-y-2\">\n                            <div className=\"flex items-center justify-between\">\n                              <span className=\"text-sm text-gray-600\">Result:</span>\n                              <span className=\"text-sm font-semibold text-gray-900\">\n                                {lab.value} {lab.unit}\n                              </span>\n                            </div>\n                            <div className=\"flex items-center justify-between\">\n                              <span className=\"text-sm text-gray-600\">Reference Range:</span>\n                              <span className=\"text-sm text-gray-600\">{lab.referenceRange}</span>\n                            </div>\n                            {lab.completedAt && (\n                              <div className=\"text-xs text-gray-500\">\n                                Completed: {new Date(lab.completedAt).toLocaleString()}\n                              </div>\n                            )}\n                          </div>\n                        ) : (\n                          <div className=\"flex items-center text-sm text-orange-700\">\n                            <Clock className=\"h-4 w-4 mr-2\" />\n                            Results expected within 15 minutes\n                          </div>\n                        )}\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* Medications Tab */}\n          {activeTab === \"medications\" && (\n            <div className=\"space-y-6\">\n              <div className=\"bg-white rounded-lg shadow-sm border border-gray-200\">\n                <div className=\"p-6\">\n                  <div className=\"flex items-center justify-between mb-6\">\n                    <h2 className=\"text-xl font-semibold text-gray-900\">Current Medications</h2>\n                    <span className=\"text-sm text-gray-500\">{medications?.length || 0} active medications</span>\n                  </div>\n                  <div className=\"space-y-4\">\n                    {medications?.map((medication) => (\n                      <div key={medication.id} className=\"border rounded-lg p-4\">\n                        <div className=\"flex items-center justify-between mb-2\">\n                          <h3 className=\"font-medium text-gray-900\">{medication.name}</h3>\n                          <span className=\"px-2 py-1 text-xs bg-blue-100 text-blue-800 rounded-full\">\n                            Active\n                          </span>\n                        </div>\n                        <div className=\"grid grid-cols-2 gap-4\">\n                          <div>\n                            <span className=\"text-sm text-gray-600\">Dosage:</span>\n                            <span className=\"text-sm font-medium text-gray-900 ml-2\">{medication.dosage}</span>\n                          </div>\n                          <div>\n                            <span className=\"text-sm text-gray-600\">Frequency:</span>\n                            <span className=\"text-sm font-medium text-gray-900 ml-2\">{medication.frequency}</span>\n                          </div>\n                        </div>\n                        {medication.prescribedAt && (\n                          <div className=\"text-xs text-gray-500 mt-2\">\n                            Prescribed: {new Date(medication.prescribedAt).toLocaleDateString()}\n                          </div>\n                        )}\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              </div>\n\n              {/* Medical History */}\n              <div className=\"bg-white rounded-lg shadow-sm border border-gray-200\">\n                <div className=\"p-6\">\n                  <h2 className=\"text-xl font-semibold text-gray-900 mb-6\">Medical History</h2>\n                  <div className=\"space-y-4\">\n                    {medicalHistory?.map((history) => (\n                      <div key={history.id} className=\"border rounded-lg p-4\">\n                        <div className=\"flex items-center justify-between mb-2\">\n                          <h3 className=\"font-medium text-gray-900\">{history.condition}</h3>\n                          <span className=\"text-sm text-gray-500\">{history.diagnosedYear}</span>\n                        </div>\n                        {history.notes && (\n                          <p className=\"text-sm text-gray-600\">{history.notes}</p>\n                        )}\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* Orders Tab */}\n          {activeTab === \"orders\" && (\n            <div className=\"space-y-6\">\n              <div className=\"bg-white rounded-lg shadow-sm border border-gray-200\">\n                <div className=\"p-6\">\n                  <h2 className=\"text-xl font-semibold text-gray-900 mb-6\">Current Orders</h2>\n                  <div className=\"text-center py-8\">\n                    <p className=\"text-gray-500\">No active orders at this time</p>\n                    <p className=\"text-sm text-gray-400 mt-2\">Orders will appear here when placed by clinical staff</p>\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* Notes Tab */}\n          {activeTab === \"notes\" && (\n            <div className=\"space-y-6\">\n              <div className=\"bg-white rounded-lg shadow-sm border border-gray-200\">\n                <div className=\"p-6\">\n                  <div className=\"flex items-center justify-between mb-6\">\n                    <h2 className=\"text-xl font-semibold text-gray-900\">Clinical Notes</h2>\n                    <span className=\"text-sm text-gray-500\">{soapNotes?.length || 0} SOAP notes</span>\n                  </div>\n                  \n                  {soapNotes && soapNotes.length > 0 ? (\n                    <div className=\"space-y-4\">\n                      {soapNotes.map((note) => (\n                        <div key={note.id} className=\"border rounded-lg p-6 bg-gray-50\">\n                          <div className=\"flex items-center justify-between mb-4\">\n                            <div className=\"flex items-center space-x-2\">\n                              <User className=\"h-4 w-4 text-gray-500\" />\n                              <span className=\"text-sm font-medium text-gray-700\">Clinical Assessment</span>\n                            </div>\n                            <div className=\"flex items-center space-x-2 text-sm text-gray-500\">\n                              <Calendar className=\"h-4 w-4\" />\n                              <span>{new Date(note.createdAt).toLocaleString()}</span>\n                            </div>\n                          </div>\n                          \n                          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                            <div className=\"space-y-4\">\n                              <div>\n                                <h4 className=\"text-sm font-semibold text-gray-900 mb-2\">Subjective</h4>\n                                <div className=\"bg-white p-3 rounded border text-sm text-gray-700\">\n                                  {note.subjective || \"No subjective data recorded\"}\n                                </div>\n                              </div>\n                              \n                              <div>\n                                <h4 className=\"text-sm font-semibold text-gray-900 mb-2\">Objective</h4>\n                                <div className=\"bg-white p-3 rounded border text-sm text-gray-700\">\n                                  {note.objective || \"No objective data recorded\"}\n                                </div>\n                              </div>\n                            </div>\n                            \n                            <div className=\"space-y-4\">\n                              <div>\n                                <h4 className=\"text-sm font-semibold text-gray-900 mb-2\">Assessment</h4>\n                                <div className=\"bg-white p-3 rounded border text-sm text-gray-700\">\n                                  {note.assessment || \"No assessment recorded\"}\n                                </div>\n                              </div>\n                              \n                              <div>\n                                <h4 className=\"text-sm font-semibold text-gray-900 mb-2\">Plan</h4>\n                                <div className=\"bg-white p-3 rounded border text-sm text-gray-700\">\n                                  {note.plan || \"No plan recorded\"}\n                                </div>\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  ) : (\n                    <div className=\"text-center py-8\">\n                      <p className=\"text-gray-500\">No clinical notes recorded</p>\n                      <p className=\"text-sm text-gray-400 mt-2\">SOAP notes will appear here when submitted</p>\n                    </div>\n                  )}\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* Imaging Tab */}\n          {activeTab === \"imaging\" && (\n            <div className=\"space-y-6\">\n              <div className=\"bg-white rounded-lg shadow-sm border border-gray-200\">\n                <div className=\"p-6\">\n                  <h2 className=\"text-xl font-semibold text-gray-900 mb-6\">Imaging Studies</h2>\n                  <div className=\"space-y-4\">\n                    <div className=\"border rounded-lg p-4\">\n                      <div className=\"flex items-center justify-between mb-2\">\n                        <h3 className=\"font-medium text-gray-900\">Chest X-Ray</h3>\n                        <span className=\"px-2 py-1 text-xs bg-green-100 text-green-800 rounded-full\">\n                          Available\n                        </span>\n                      </div>\n                      <div className=\"space-y-2\">\n                        <div className=\"text-sm text-gray-600\">\n                          <strong>Study Date:</strong> {new Date().toLocaleDateString()}\n                        </div>\n                        <div className=\"text-sm text-gray-600\">\n                          <strong>Indication:</strong> Chest pain, rule out pneumonia\n                        </div>\n                        <div className=\"text-sm text-gray-600\">\n                          <strong>Preliminary Findings:</strong> No acute cardiopulmonary abnormalities. Heart size normal. Lungs clear bilaterally.\n                        </div>\n                      </div>\n                    </div>\n                    \n                    <div className=\"border rounded-lg p-4\">\n                      <div className=\"flex items-center justify-between mb-2\">\n                        <h3 className=\"font-medium text-gray-900\">ECG (12-Lead)</h3>\n                        <span className=\"px-2 py-1 text-xs bg-yellow-100 text-yellow-800 rounded-full\">\n                          Pending Review\n                        </span>\n                      </div>\n                      <div className=\"space-y-2\">\n                        <div className=\"text-sm text-gray-600\">\n                          <strong>Study Date:</strong> {new Date().toLocaleDateString()}\n                        </div>\n                        <div className=\"text-sm text-gray-600\">\n                          <strong>Indication:</strong> Chest pain, rule out MI\n                        </div>\n                        <div className=\"text-sm text-orange-600\">\n                          <strong>Status:</strong> Awaiting cardiologist interpretation\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":28100},"client/src/components/soap-notes-form.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Save } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface SoapNotesFormProps {\n  patientId: string;\n}\n\nexport default function SoapNotesForm({ patientId }: SoapNotesFormProps) {\n  const [subjective, setSubjective] = useState(\"\");\n  const [objective, setObjective] = useState(\"\");\n  const [assessment, setAssessment] = useState(\"\");\n  const [plan, setPlan] = useState(\"\");\n  \n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const createSoapNoteMutation = useMutation({\n    mutationFn: async (data: {\n      subjective: string;\n      objective: string;\n      assessment: string;\n      plan: string;\n      authorId: string;\n    }) => {\n      const response = await apiRequest(\"POST\", `/api/patients/${patientId}/soap-notes`, data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/patients\", patientId, \"soap-notes\"] });\n      toast({\n        title: \"Success\",\n        description: \"SOAP note saved successfully!\",\n        variant: \"default\",\n      });\n      // Clear form\n      setSubjective(\"\");\n      setObjective(\"\");\n      setAssessment(\"\");\n      setPlan(\"\");\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to save SOAP note. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!user) return;\n\n    if (!subjective || !objective || !assessment || !plan) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Please complete all sections of the SOAP note.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    createSoapNoteMutation.mutate({\n      subjective,\n      objective,\n      assessment,\n      plan,\n      authorId: user.id,\n    });\n  };\n\n  return (\n    <div className=\"bg-white rounded-lg shadow-sm border border-gray-200 p-6\">\n      <h3 className=\"text-md font-medium text-gray-800 mb-4\">SOAP Note Entry</h3>\n      <form onSubmit={handleSubmit} className=\"space-y-4\">\n        <div>\n          <Label htmlFor=\"subjective\" className=\"text-sm font-medium text-gray-700\">\n            Subjective\n          </Label>\n          <Textarea\n            id=\"subjective\"\n            value={subjective}\n            onChange={(e) => setSubjective(e.target.value)}\n            className=\"mt-1\"\n            rows={3}\n            placeholder=\"Patient reports...\"\n          />\n        </div>\n        \n        <div>\n          <Label htmlFor=\"objective\" className=\"text-sm font-medium text-gray-700\">\n            Objective\n          </Label>\n          <Textarea\n            id=\"objective\"\n            value={objective}\n            onChange={(e) => setObjective(e.target.value)}\n            className=\"mt-1\"\n            rows={3}\n            placeholder=\"Physical examination findings...\"\n          />\n        </div>\n        \n        <div>\n          <Label htmlFor=\"assessment\" className=\"text-sm font-medium text-gray-700\">\n            Assessment\n          </Label>\n          <Textarea\n            id=\"assessment\"\n            value={assessment}\n            onChange={(e) => setAssessment(e.target.value)}\n            className=\"mt-1\"\n            rows={2}\n            placeholder=\"Clinical impression...\"\n          />\n        </div>\n        \n        <div>\n          <Label htmlFor=\"plan\" className=\"text-sm font-medium text-gray-700\">\n            Plan\n          </Label>\n          <Textarea\n            id=\"plan\"\n            value={plan}\n            onChange={(e) => setPlan(e.target.value)}\n            className=\"mt-1\"\n            rows={3}\n            placeholder=\"Treatment plan...\"\n          />\n        </div>\n        \n        <Button\n          type=\"submit\"\n          className=\"w-full bg-hospital-blue hover:bg-hospital-blue/90\"\n          disabled={createSoapNoteMutation.isPending}\n        >\n          <Save className=\"h-4 w-4 mr-2\" />\n          {createSoapNoteMutation.isPending ? \"Saving...\" : \"Save SOAP Note\"}\n        </Button>\n      </form>\n    </div>\n  );\n}\n","size_bytes":4450},"client/src/components/top-navigation.tsx":{"content":"import { Hospital, Users, User, Settings } from \"lucide-react\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { Button } from \"@/components/ui/button\";\nimport { Link } from \"wouter\";\n\ninterface TopNavigationProps {\n  currentMode: \"student\" | \"instructor\";\n  onModeChange: (mode: \"student\" | \"instructor\") => void;\n  sessionName?: string;\n  timeRemaining?: string;\n}\n\nexport default function TopNavigation({ \n  currentMode, \n  onModeChange, \n  sessionName = \"Emergency Department Scenario\",\n  timeRemaining = \"42:15\"\n}: TopNavigationProps) {\n  const { user, logout } = useAuth();\n\n  return (\n    <header className=\"bg-hospital-blue text-white px-6 py-4 flex items-center justify-between shadow-lg\">\n      <div className=\"flex items-center space-x-4\">\n        <div className=\"flex items-center space-x-2\">\n          <Hospital className=\"h-6 w-6\" />\n          <h1 className=\"text-xl font-semibold\">Digital Medical Records</h1>\n          <span className=\"bg-white/20 px-2 py-1 rounded text-sm font-medium\">\n            Simulation Platform\n          </span>\n        </div>\n      </div>\n      \n      <div className=\"flex items-center space-x-6\">\n        {user?.role === \"instructor\" && (\n          <>\n            <div className=\"flex items-center space-x-2\">\n              <span className=\"text-sm\">Mode:</span>\n              <select \n                value={currentMode}\n                onChange={(e) => onModeChange(e.target.value as \"student\" | \"instructor\")}\n                className=\"bg-white/10 border border-white/20 rounded px-3 py-1 text-sm\"\n              >\n                <option value=\"instructor\">Instructor Mode</option>\n                <option value=\"student\">Student Mode</option>\n              </select>\n            </div>\n            <Link href=\"/group-manager\">\n              <Button \n                variant=\"ghost\" \n                size=\"sm\"\n                className=\"bg-white/10 hover:bg-white/20 text-white flex items-center gap-2\"\n              >\n                <Settings className=\"h-4 w-4\" />\n                Group Manager\n              </Button>\n            </Link>\n          </>\n        )}\n        \n        <div className=\"flex items-center space-x-2\">\n          <Users className=\"h-4 w-4\" />\n          <span className=\"text-sm\">{sessionName}</span>\n        </div>\n        \n        <div className=\"flex items-center space-x-2\">\n          <span className=\"text-sm\">Time: {timeRemaining}</span>\n        </div>\n        \n        <div className=\"flex items-center space-x-2\">\n          <div className=\"w-8 h-8 bg-white/20 rounded-full flex items-center justify-center\">\n            <User className=\"h-4 w-4\" />\n          </div>\n          <span className=\"text-sm\">{user?.firstName} {user?.lastName}</span>\n        </div>\n        \n        <Button \n          onClick={logout}\n          variant=\"ghost\" \n          size=\"sm\"\n          className=\"bg-white/10 hover:bg-white/20 text-white\"\n        >\n          Logout\n        </Button>\n      </div>\n    </header>\n  );\n}\n","size_bytes":2987},"client/src/hooks/use-auth.tsx":{"content":"import { createContext, useContext, useState, useEffect } from \"react\";\nimport type { User } from \"@shared/schema\";\n\ninterface AuthContextType {\n  user: User | null;\n  login: (username: string, password: string) => Promise<boolean>;\n  logout: () => void;\n  isLoading: boolean;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport function AuthProvider({ children }: { children: React.ReactNode }) {\n  const [user, setUser] = useState<User | null>(() => {\n    // Initialize state directly from localStorage to avoid delay\n    const storedUser = localStorage.getItem(\"user\");\n    return storedUser ? JSON.parse(storedUser) : null;\n  });\n  const [isLoading, setIsLoading] = useState(false); // Start with false since we check localStorage immediately\n\n  useEffect(() => {\n    // Listen for storage events from other tabs/windows\n    const handleStorageChange = (e: StorageEvent) => {\n      if (e.key === \"user\") {\n        if (e.newValue) {\n          setUser(JSON.parse(e.newValue));\n        } else {\n          setUser(null);\n        }\n      }\n    };\n\n    window.addEventListener(\"storage\", handleStorageChange);\n    return () => window.removeEventListener(\"storage\", handleStorageChange);\n  }, []);\n\n  const login = async (username: string, password: string): Promise<boolean> => {\n    try {\n      setIsLoading(true);\n      const response = await fetch(\"/api/auth/login\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ username, password }),\n      });\n\n      if (response.ok) {\n        const { user } = await response.json();\n        setUser(user);\n        localStorage.setItem(\"user\", JSON.stringify(user));\n        setIsLoading(false);\n        return true;\n      }\n      setIsLoading(false);\n      return false;\n    } catch (error) {\n      console.error(\"Login error:\", error);\n      setIsLoading(false);\n      return false;\n    }\n  };\n\n  const logout = () => {\n    setUser(null);\n    localStorage.removeItem(\"user\");\n  };\n\n  return (\n    <AuthContext.Provider value={{ user, login, logout, isLoading }}>\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n}\n","size_bytes":2370},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/admin-dashboard.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { \n  Users, \n  Database, \n  UserPlus, \n  Settings, \n  Activity, \n  Shield,\n  Edit3,\n  Trash2,\n  Eye,\n  Plus,\n  AlertTriangle,\n  CheckCircle,\n  Clock\n} from \"lucide-react\";\nimport TopNavigation from \"@/components/top-navigation\";\n\n// Form schemas\nconst createDataVersionSchema = z.object({\n  name: z.string().min(1, \"Name is required\"),\n  description: z.string().optional(),\n  version: z.string().min(1, \"Version is required\"),\n  sessionId: z.string().min(1, \"Session is required\"),\n});\n\nconst createGroupAccountSchema = z.object({\n  groupId: z.string().min(1, \"Group is required\"),\n  username: z.string().min(3, \"Username must be at least 3 characters\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n});\n\nconst createUserSchema = z.object({\n  username: z.string().min(3, \"Username must be at least 3 characters\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n  firstName: z.string().min(1, \"First name is required\"),\n  lastName: z.string().min(1, \"Last name is required\"),\n  role: z.enum([\"student\", \"instructor\", \"coordinator\"]),\n});\n\ntype CreateDataVersionForm = z.infer<typeof createDataVersionSchema>;\ntype CreateGroupAccountForm = z.infer<typeof createGroupAccountSchema>;\ntype CreateUserForm = z.infer<typeof createUserSchema>;\n\nexport default function AdminDashboard() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [selectedMode, setSelectedMode] = useState<\"student\" | \"instructor\">(\"instructor\");\n\n  // Queries\n  const { data: sessions } = useQuery({\n    queryKey: [\"/api/sessions\"],\n  });\n\n  const { data: users } = useQuery({\n    queryKey: [\"/api/admin/users\"],\n  });\n\n  const { data: dataVersions } = useQuery({\n    queryKey: [\"/api/admin/data-versions\"],\n  });\n\n  const { data: groupAccounts } = useQuery({\n    queryKey: [\"/api/admin/group-accounts\"],\n  });\n\n  const { data: auditLogs } = useQuery({\n    queryKey: [\"/api/admin/audit-logs\"],\n  });\n\n  // Forms\n  const dataVersionForm = useForm<CreateDataVersionForm>({\n    resolver: zodResolver(createDataVersionSchema),\n    defaultValues: {\n      name: \"\",\n      description: \"\",\n      version: \"\",\n      sessionId: \"\",\n    },\n  });\n\n  const groupAccountForm = useForm<CreateGroupAccountForm>({\n    resolver: zodResolver(createGroupAccountSchema),\n    defaultValues: {\n      groupId: \"\",\n      username: \"\",\n      password: \"\",\n    },\n  });\n\n  const userForm = useForm<CreateUserForm>({\n    resolver: zodResolver(createUserSchema),\n    defaultValues: {\n      username: \"\",\n      password: \"\",\n      firstName: \"\",\n      lastName: \"\",\n      role: \"student\",\n    },\n  });\n\n  // Mutations\n  const createDataVersionMutation = useMutation({\n    mutationFn: async (data: CreateDataVersionForm) => {\n      return apiRequest(`/api/admin/data-versions`, {\n        method: \"POST\",\n        body: data,\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/data-versions\"] });\n      dataVersionForm.reset();\n      toast({\n        title: \"Success\",\n        description: \"Data version created successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create data version\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const createGroupAccountMutation = useMutation({\n    mutationFn: async (data: CreateGroupAccountForm) => {\n      return apiRequest(`/api/admin/group-accounts`, {\n        method: \"POST\",\n        body: data,\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/group-accounts\"] });\n      groupAccountForm.reset();\n      toast({\n        title: \"Success\",\n        description: \"Group account created successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create group account\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const createUserMutation = useMutation({\n    mutationFn: async (data: CreateUserForm) => {\n      return apiRequest(`/api/admin/users`, {\n        method: \"POST\",\n        body: data,\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/users\"] });\n      userForm.reset();\n      toast({\n        title: \"Success\",\n        description: \"User created successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create user\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteUserMutation = useMutation({\n    mutationFn: async (userId: string) => {\n      return apiRequest(`/api/admin/users/${userId}`, {\n        method: \"DELETE\",\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/users\"] });\n      toast({\n        title: \"Success\",\n        description: \"User deleted successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete user\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onCreateDataVersion = (data: CreateDataVersionForm) => {\n    createDataVersionMutation.mutate(data);\n  };\n\n  const onCreateGroupAccount = (data: CreateGroupAccountForm) => {\n    createGroupAccountMutation.mutate(data);\n  };\n\n  const onCreateUser = (data: CreateUserForm) => {\n    createUserMutation.mutate(data);\n  };\n\n  const handleDeleteUser = (userId: string) => {\n    if (confirm(\"Are you sure you want to delete this user? This action cannot be undone.\")) {\n      deleteUserMutation.mutate(userId);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <TopNavigation \n        currentMode={selectedMode}\n        onModeChange={setSelectedMode}\n        sessionName=\"System Administration\"\n        timeRemaining=\"System Online\"\n      />\n      \n      <div className=\"container mx-auto px-6 py-8\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">System Administration</h1>\n          <p className=\"text-gray-600\">\n            Manage group versions, user accounts, and system permissions\n          </p>\n        </div>\n\n        <Tabs defaultValue=\"users\" className=\"space-y-6\">\n          <TabsList className=\"grid w-full grid-cols-5\">\n            <TabsTrigger value=\"users\" className=\"flex items-center gap-2\">\n              <Users className=\"h-4 w-4\" />\n              User Management\n            </TabsTrigger>\n            <TabsTrigger value=\"versions\" className=\"flex items-center gap-2\">\n              <Database className=\"h-4 w-4\" />\n              Data Versions\n            </TabsTrigger>\n            <TabsTrigger value=\"accounts\" className=\"flex items-center gap-2\">\n              <UserPlus className=\"h-4 w-4\" />\n              Group Accounts\n            </TabsTrigger>\n            <TabsTrigger value=\"permissions\" className=\"flex items-center gap-2\">\n              <Shield className=\"h-4 w-4\" />\n              Permissions\n            </TabsTrigger>\n            <TabsTrigger value=\"audit\" className=\"flex items-center gap-2\">\n              <Activity className=\"h-4 w-4\" />\n              Audit Trail\n            </TabsTrigger>\n          </TabsList>\n\n          {/* User Management Tab */}\n          <TabsContent value=\"users\" className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n              <div className=\"lg:col-span-2\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle>All Users</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-4\">\n                      {users?.map((user: any) => (\n                        <div key={user.id} className=\"flex items-center justify-between p-4 border rounded-lg\">\n                          <div>\n                            <div className=\"font-medium\">{user.firstName} {user.lastName}</div>\n                            <div className=\"text-sm text-gray-500\">@{user.username}</div>\n                            <Badge \n                              variant={user.role === 'admin' ? 'destructive' : \n                                      user.role === 'coordinator' ? 'secondary' : \n                                      user.role === 'instructor' ? 'default' : 'outline'}\n                            >\n                              {user.role}\n                            </Badge>\n                          </div>\n                          <div className=\"flex items-center space-x-2\">\n                            <Button variant=\"ghost\" size=\"sm\">\n                              <Edit3 className=\"h-4 w-4\" />\n                            </Button>\n                            <Button \n                              variant=\"ghost\" \n                              size=\"sm\"\n                              onClick={() => handleDeleteUser(user.id)}\n                              disabled={user.role === 'admin'}\n                            >\n                              <Trash2 className=\"h-4 w-4\" />\n                            </Button>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n\n              <div>\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Create New User</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <Form {...userForm}>\n                      <form onSubmit={userForm.handleSubmit(onCreateUser)} className=\"space-y-4\">\n                        <FormField\n                          control={userForm.control}\n                          name=\"username\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Username</FormLabel>\n                              <FormControl>\n                                <Input {...field} />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        <FormField\n                          control={userForm.control}\n                          name=\"password\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Password</FormLabel>\n                              <FormControl>\n                                <Input type=\"password\" {...field} />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        <FormField\n                          control={userForm.control}\n                          name=\"firstName\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>First Name</FormLabel>\n                              <FormControl>\n                                <Input {...field} />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        <FormField\n                          control={userForm.control}\n                          name=\"lastName\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Last Name</FormLabel>\n                              <FormControl>\n                                <Input {...field} />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        <FormField\n                          control={userForm.control}\n                          name=\"role\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Role</FormLabel>\n                              <Select onValueChange={field.onChange} defaultValue={field.value}>\n                                <FormControl>\n                                  <SelectTrigger>\n                                    <SelectValue />\n                                  </SelectTrigger>\n                                </FormControl>\n                                <SelectContent>\n                                  <SelectItem value=\"student\">Student</SelectItem>\n                                  <SelectItem value=\"instructor\">Instructor</SelectItem>\n                                  <SelectItem value=\"coordinator\">Coordinator</SelectItem>\n                                </SelectContent>\n                              </Select>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        <Button \n                          type=\"submit\" \n                          className=\"w-full\"\n                          disabled={createUserMutation.isPending}\n                        >\n                          {createUserMutation.isPending ? \"Creating...\" : \"Create User\"}\n                        </Button>\n                      </form>\n                    </Form>\n                  </CardContent>\n                </Card>\n              </div>\n            </div>\n          </TabsContent>\n\n          {/* Data Versions Tab */}\n          <TabsContent value=\"versions\" className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n              <div className=\"lg:col-span-2\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Data Versions</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-4\">\n                      {dataVersions?.map((version: any) => (\n                        <div key={version.id} className=\"p-4 border rounded-lg\">\n                          <div className=\"flex items-center justify-between mb-2\">\n                            <div className=\"font-medium\">{version.name}</div>\n                            <Badge>{version.version}</Badge>\n                          </div>\n                          <div className=\"text-sm text-gray-500 mb-2\">{version.description}</div>\n                          <div className=\"text-xs text-gray-400\">\n                            Created: {new Date(version.createdAt).toLocaleDateString()}\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n\n              <div>\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Create Data Version</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <Form {...dataVersionForm}>\n                      <form onSubmit={dataVersionForm.handleSubmit(onCreateDataVersion)} className=\"space-y-4\">\n                        <FormField\n                          control={dataVersionForm.control}\n                          name=\"name\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Name</FormLabel>\n                              <FormControl>\n                                <Input {...field} />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        <FormField\n                          control={dataVersionForm.control}\n                          name=\"version\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Version</FormLabel>\n                              <FormControl>\n                                <Input placeholder=\"v1.0\" {...field} />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        <FormField\n                          control={dataVersionForm.control}\n                          name=\"description\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Description</FormLabel>\n                              <FormControl>\n                                <Input {...field} />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        <FormField\n                          control={dataVersionForm.control}\n                          name=\"sessionId\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Session</FormLabel>\n                              <Select onValueChange={field.onChange} defaultValue={field.value}>\n                                <FormControl>\n                                  <SelectTrigger>\n                                    <SelectValue placeholder=\"Select session\" />\n                                  </SelectTrigger>\n                                </FormControl>\n                                <SelectContent>\n                                  {sessions?.map((session: any) => (\n                                    <SelectItem key={session.id} value={session.id}>\n                                      {session.name}\n                                    </SelectItem>\n                                  ))}\n                                </SelectContent>\n                              </Select>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        <Button \n                          type=\"submit\" \n                          className=\"w-full\"\n                          disabled={createDataVersionMutation.isPending}\n                        >\n                          {createDataVersionMutation.isPending ? \"Creating...\" : \"Create Version\"}\n                        </Button>\n                      </form>\n                    </Form>\n                  </CardContent>\n                </Card>\n              </div>\n            </div>\n          </TabsContent>\n\n          {/* Group Accounts Tab */}\n          <TabsContent value=\"accounts\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Group Account Management</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                  <div className=\"space-y-4\">\n                    {groupAccounts?.map((account: any) => (\n                      <div key={account.id} className=\"p-4 border rounded-lg\">\n                        <div className=\"flex items-center justify-between\">\n                          <div>\n                            <div className=\"font-medium\">@{account.username}</div>\n                            <div className=\"text-sm text-gray-500\">Group: {account.groupId}</div>\n                            <Badge variant={account.active ? \"default\" : \"secondary\"}>\n                              {account.active ? \"Active\" : \"Inactive\"}\n                            </Badge>\n                          </div>\n                          <Button variant=\"ghost\" size=\"sm\">\n                            <Settings className=\"h-4 w-4\" />\n                          </Button>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n\n                  <div>\n                    <h3 className=\"font-medium mb-4\">Create Group Account</h3>\n                    <Alert className=\"mb-4\">\n                      <AlertTriangle className=\"h-4 w-4\" />\n                      <AlertDescription>\n                        Group accounts provide shared access for student groups to assigned patient data versions.\n                      </AlertDescription>\n                    </Alert>\n                    {/* Group account creation form would go here */}\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Permissions Tab */}\n          <TabsContent value=\"permissions\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Permission Management</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  <Alert>\n                    <Shield className=\"h-4 w-4\" />\n                    <AlertDescription>\n                      Configure role-based permissions for different user types.\n                    </AlertDescription>\n                  </Alert>\n                  \n                  <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n                    <Card>\n                      <CardHeader className=\"pb-3\">\n                        <CardTitle className=\"text-sm\">Students</CardTitle>\n                      </CardHeader>\n                      <CardContent className=\"space-y-2 text-sm\">\n                        <div className=\"flex items-center gap-2\">\n                          <CheckCircle className=\"h-3 w-3 text-green-500\" />\n                          View assigned patients\n                        </div>\n                        <div className=\"flex items-center gap-2\">\n                          <CheckCircle className=\"h-3 w-3 text-green-500\" />\n                          Write SOAP notes\n                        </div>\n                        <div className=\"flex items-center gap-2\">\n                          <CheckCircle className=\"h-3 w-3 text-green-500\" />\n                          Place orders\n                        </div>\n                      </CardContent>\n                    </Card>\n\n                    <Card>\n                      <CardHeader className=\"pb-3\">\n                        <CardTitle className=\"text-sm\">Instructors</CardTitle>\n                      </CardHeader>\n                      <CardContent className=\"space-y-2 text-sm\">\n                        <div className=\"flex items-center gap-2\">\n                          <CheckCircle className=\"h-3 w-3 text-green-500\" />\n                          All student permissions\n                        </div>\n                        <div className=\"flex items-center gap-2\">\n                          <CheckCircle className=\"h-3 w-3 text-green-500\" />\n                          Control scenarios\n                        </div>\n                        <div className=\"flex items-center gap-2\">\n                          <CheckCircle className=\"h-3 w-3 text-green-500\" />\n                          Manage groups\n                        </div>\n                      </CardContent>\n                    </Card>\n\n                    <Card>\n                      <CardHeader className=\"pb-3\">\n                        <CardTitle className=\"text-sm\">Coordinators</CardTitle>\n                      </CardHeader>\n                      <CardContent className=\"space-y-2 text-sm\">\n                        <div className=\"flex items-center gap-2\">\n                          <CheckCircle className=\"h-3 w-3 text-green-500\" />\n                          Upload documents\n                        </div>\n                        <div className=\"flex items-center gap-2\">\n                          <CheckCircle className=\"h-3 w-3 text-green-500\" />\n                          Schedule releases\n                        </div>\n                        <div className=\"flex items-center gap-2\">\n                          <CheckCircle className=\"h-3 w-3 text-green-500\" />\n                          Manage timeline\n                        </div>\n                      </CardContent>\n                    </Card>\n\n                    <Card>\n                      <CardHeader className=\"pb-3\">\n                        <CardTitle className=\"text-sm\">Admins</CardTitle>\n                      </CardHeader>\n                      <CardContent className=\"space-y-2 text-sm\">\n                        <div className=\"flex items-center gap-2\">\n                          <CheckCircle className=\"h-3 w-3 text-green-500\" />\n                          All permissions\n                        </div>\n                        <div className=\"flex items-center gap-2\">\n                          <CheckCircle className=\"h-3 w-3 text-green-500\" />\n                          User management\n                        </div>\n                        <div className=\"flex items-center gap-2\">\n                          <CheckCircle className=\"h-3 w-3 text-green-500\" />\n                          System configuration\n                        </div>\n                      </CardContent>\n                    </Card>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Audit Trail Tab */}\n          <TabsContent value=\"audit\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>System Activity Audit Trail</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {auditLogs?.slice(0, 10).map((log: any) => (\n                    <div key={log.id} className=\"flex items-center justify-between p-4 border rounded-lg\">\n                      <div className=\"flex items-center gap-3\">\n                        <div className=\"w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center\">\n                          <Activity className=\"h-4 w-4 text-blue-600\" />\n                        </div>\n                        <div>\n                          <div className=\"font-medium\">{log.action}</div>\n                          <div className=\"text-sm text-gray-500\">\n                            {log.entityType} • {log.entityId}\n                          </div>\n                        </div>\n                      </div>\n                      <div className=\"text-right\">\n                        <div className=\"text-sm font-medium\">{log.performedBy}</div>\n                        <div className=\"text-xs text-gray-500\">\n                          {new Date(log.timestamp).toLocaleString()}\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}","size_bytes":28126},"client/src/pages/coordinator-dashboard.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { \n  Upload, \n  Calendar, \n  Clock, \n  FileText, \n  Image,\n  Play,\n  Pause,\n  Settings,\n  Eye,\n  EyeOff,\n  CheckCircle,\n  AlertCircle,\n  Download,\n  Trash2,\n  Plus,\n  Users,\n  Database\n} from \"lucide-react\";\nimport TopNavigation from \"@/components/top-navigation\";\n\n// Form schemas\nconst uploadDocumentSchema = z.object({\n  patientId: z.string().optional(),\n  category: z.enum([\"admission\", \"lab\", \"imaging\", \"notes\"]),\n  sessionId: z.string().min(1, \"Session is required\"),\n});\n\nconst scheduleReleaseSchema = z.object({\n  documentId: z.string().min(1, \"Document is required\"),\n  groupId: z.string().min(1, \"Group is required\"),\n  releaseType: z.enum([\"manual\", \"scheduled\"]),\n  scheduledAt: z.string().optional(),\n  notes: z.string().optional(),\n});\n\nconst simulationWeekSchema = z.object({\n  name: z.string().min(1, \"Name is required\"),\n  weekNumber: z.number().min(1, \"Week number is required\"),\n  startDate: z.string().min(1, \"Start date is required\"),\n  endDate: z.string().min(1, \"End date is required\"),\n  sessionId: z.string().min(1, \"Session is required\"),\n});\n\ntype UploadDocumentForm = z.infer<typeof uploadDocumentSchema>;\ntype ScheduleReleaseForm = z.infer<typeof scheduleReleaseSchema>;\ntype SimulationWeekForm = z.infer<typeof simulationWeekSchema>;\n\nexport default function CoordinatorDashboard() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [selectedMode, setSelectedMode] = useState<\"student\" | \"instructor\">(\"instructor\");\n  const [selectedFile, setSelectedFile] = useState<File | null>(null);\n\n  // Queries\n  const { data: sessions = [] } = useQuery({\n    queryKey: [\"/api/sessions\"],\n  });\n\n  const { data: patients = [] } = useQuery({\n    queryKey: [\"/api/patients\"],\n  });\n\n  const { data: groups = [] } = useQuery({\n    queryKey: [\"/api/groups\"],\n  });\n\n  const { data: documents = [] } = useQuery({\n    queryKey: [\"/api/coordinator/documents\"],\n  });\n\n  const { data: documentReleases = [] } = useQuery({\n    queryKey: [\"/api/coordinator/document-releases\"],\n  });\n\n  const { data: simulationWeeks = [] } = useQuery({\n    queryKey: [\"/api/coordinator/simulation-weeks\"],\n  });\n\n  // Forms\n  const uploadForm = useForm<UploadDocumentForm>({\n    resolver: zodResolver(uploadDocumentSchema),\n    defaultValues: {\n      category: \"admission\",\n      sessionId: \"\",\n    },\n  });\n\n  const releaseForm = useForm<ScheduleReleaseForm>({\n    resolver: zodResolver(scheduleReleaseSchema),\n    defaultValues: {\n      documentId: \"\",\n      groupId: \"\",\n      releaseType: \"manual\",\n    },\n  });\n\n  const weekForm = useForm<SimulationWeekForm>({\n    resolver: zodResolver(simulationWeekSchema),\n    defaultValues: {\n      name: \"\",\n      weekNumber: 1,\n      startDate: \"\",\n      endDate: \"\",\n      sessionId: \"\",\n    },\n  });\n\n  // Mutations\n  const uploadDocumentMutation = useMutation({\n    mutationFn: async (data: UploadDocumentForm & { file: File }) => {\n      const formData = new FormData();\n      formData.append('file', data.file);\n      formData.append('sessionId', data.sessionId);\n      formData.append('category', data.category);\n      if (data.patientId) {\n        formData.append('patientId', data.patientId);\n      }\n\n      return fetch('/api/coordinator/documents/upload', {\n        method: 'POST',\n        body: formData,\n      }).then(res => res.json());\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/coordinator/documents\"] });\n      uploadForm.reset();\n      setSelectedFile(null);\n      toast({\n        title: \"Success\",\n        description: \"Document uploaded successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to upload document\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const scheduleReleaseMutation = useMutation({\n    mutationFn: async (data: ScheduleReleaseForm) => {\n      const response = await apiRequest(\"POST\", \"/api/coordinator/document-releases\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/coordinator/document-releases\"] });\n      releaseForm.reset();\n      toast({\n        title: \"Success\",\n        description: \"Document release scheduled successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to schedule release\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const createSimulationWeekMutation = useMutation({\n    mutationFn: async (data: SimulationWeekForm) => {\n      const response = await apiRequest(\"POST\", \"/api/coordinator/simulation-weeks\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/coordinator/simulation-weeks\"] });\n      weekForm.reset();\n      toast({\n        title: \"Success\",\n        description: \"Simulation week created successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create simulation week\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const releaseDocumentMutation = useMutation({\n    mutationFn: async (releaseId: string) => {\n      const response = await apiRequest(\"POST\", `/api/coordinator/document-releases/${releaseId}/release`);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/coordinator/document-releases\"] });\n      toast({\n        title: \"Success\",\n        description: \"Document released successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to release document\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onUploadDocument = (data: UploadDocumentForm) => {\n    if (!selectedFile) {\n      toast({\n        title: \"Error\",\n        description: \"Please select a file to upload\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    uploadDocumentMutation.mutate({ ...data, file: selectedFile });\n  };\n\n  const onScheduleRelease = (data: ScheduleReleaseForm) => {\n    scheduleReleaseMutation.mutate(data);\n  };\n\n  const onCreateSimulationWeek = (data: SimulationWeekForm) => {\n    createSimulationWeekMutation.mutate(data);\n  };\n\n  const handleReleaseDocument = (releaseId: string) => {\n    if (confirm(\"Are you sure you want to release this document? It will become visible to the selected group.\")) {\n      releaseDocumentMutation.mutate(releaseId);\n    }\n  };\n\n  const getDocumentIcon = (category: string) => {\n    switch (category) {\n      case 'imaging':\n        return <Image className=\"h-4 w-4\" />;\n      case 'lab':\n        return <Database className=\"h-4 w-4\" />;\n      default:\n        return <FileText className=\"h-4 w-4\" />;\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <TopNavigation \n        currentMode={selectedMode}\n        onModeChange={setSelectedMode}\n        sessionName=\"Simulation Coordination\"\n        timeRemaining=\"System Online\"\n      />\n      \n      <div className=\"container mx-auto px-6 py-8\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">Simulation Coordination</h1>\n          <p className=\"text-gray-600\">\n            Upload documents, schedule releases, and manage simulation timelines\n          </p>\n        </div>\n\n        <Tabs defaultValue=\"documents\" className=\"space-y-6\">\n          <TabsList className=\"grid w-full grid-cols-4\">\n            <TabsTrigger value=\"documents\" className=\"flex items-center gap-2\">\n              <Upload className=\"h-4 w-4\" />\n              Document Management\n            </TabsTrigger>\n            <TabsTrigger value=\"releases\" className=\"flex items-center gap-2\">\n              <Calendar className=\"h-4 w-4\" />\n              Release Schedule\n            </TabsTrigger>\n            <TabsTrigger value=\"timeline\" className=\"flex items-center gap-2\">\n              <Clock className=\"h-4 w-4\" />\n              Simulation Timeline\n            </TabsTrigger>\n            <TabsTrigger value=\"monitoring\" className=\"flex items-center gap-2\">\n              <Eye className=\"h-4 w-4\" />\n              Activity Monitor\n            </TabsTrigger>\n          </TabsList>\n\n          {/* Document Management Tab */}\n          <TabsContent value=\"documents\" className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n              <div className=\"lg:col-span-2\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Uploaded Documents</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-4\">\n                      {documents?.map((doc: any) => (\n                        <div key={doc.id} className=\"flex items-center justify-between p-4 border rounded-lg\">\n                          <div className=\"flex items-center gap-3\">\n                            {getDocumentIcon(doc.category)}\n                            <div>\n                              <div className=\"font-medium\">{doc.originalName}</div>\n                              <div className=\"text-sm text-gray-500\">\n                                {doc.category} • {(doc.fileSize / 1024).toFixed(1)} KB\n                              </div>\n                              <div className=\"text-xs text-gray-400\">\n                                Uploaded: {new Date(doc.uploadedAt).toLocaleDateString()}\n                              </div>\n                            </div>\n                          </div>\n                          <div className=\"flex items-center space-x-2\">\n                            <Badge variant={doc.patientId ? \"default\" : \"secondary\"}>\n                              {doc.patientId ? \"Patient Specific\" : \"General\"}\n                            </Badge>\n                            <Button variant=\"ghost\" size=\"sm\">\n                              <Download className=\"h-4 w-4\" />\n                            </Button>\n                            <Button variant=\"ghost\" size=\"sm\">\n                              <Trash2 className=\"h-4 w-4\" />\n                            </Button>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n\n              <div>\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Upload New Document</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <Form {...uploadForm}>\n                      <form onSubmit={uploadForm.handleSubmit(onUploadDocument)} className=\"space-y-4\">\n                        <div>\n                          <Label htmlFor=\"file\">Select File</Label>\n                          <Input\n                            id=\"file\"\n                            type=\"file\"\n                            accept=\".pdf,.doc,.docx,.jpg,.jpeg,.png,.dicom\"\n                            onChange={(e) => setSelectedFile(e.target.files?.[0] || null)}\n                            className=\"mt-1\"\n                          />\n                          {selectedFile && (\n                            <div className=\"text-sm text-gray-500 mt-1\">\n                              Selected: {selectedFile.name}\n                            </div>\n                          )}\n                        </div>\n\n                        <FormField\n                          control={uploadForm.control}\n                          name=\"category\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Document Category</FormLabel>\n                              <Select onValueChange={field.onChange} defaultValue={field.value}>\n                                <FormControl>\n                                  <SelectTrigger>\n                                    <SelectValue />\n                                  </SelectTrigger>\n                                </FormControl>\n                                <SelectContent>\n                                  <SelectItem value=\"admission\">Admission Forms</SelectItem>\n                                  <SelectItem value=\"lab\">Lab Results</SelectItem>\n                                  <SelectItem value=\"imaging\">Imaging Reports</SelectItem>\n                                  <SelectItem value=\"notes\">Clinical Notes</SelectItem>\n                                </SelectContent>\n                              </Select>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <FormField\n                          control={uploadForm.control}\n                          name=\"sessionId\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Session</FormLabel>\n                              <Select onValueChange={field.onChange} defaultValue={field.value}>\n                                <FormControl>\n                                  <SelectTrigger>\n                                    <SelectValue placeholder=\"Select session\" />\n                                  </SelectTrigger>\n                                </FormControl>\n                                <SelectContent>\n                                  {sessions?.map((session: any) => (\n                                    <SelectItem key={session.id} value={session.id}>\n                                      {session.name}\n                                    </SelectItem>\n                                  ))}\n                                </SelectContent>\n                              </Select>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <FormField\n                          control={uploadForm.control}\n                          name=\"patientId\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Patient (Optional)</FormLabel>\n                              <Select onValueChange={field.onChange} defaultValue={field.value}>\n                                <FormControl>\n                                  <SelectTrigger>\n                                    <SelectValue placeholder=\"Select patient (optional)\" />\n                                  </SelectTrigger>\n                                </FormControl>\n                                <SelectContent>\n                                  <SelectItem value=\"none\">No specific patient</SelectItem>\n                                  {patients?.map((patient: any) => (\n                                    <SelectItem key={patient.id} value={patient.id}>\n                                      {patient.firstName} {patient.lastName} (MRN: {patient.mrn})\n                                    </SelectItem>\n                                  ))}\n                                </SelectContent>\n                              </Select>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <Button \n                          type=\"submit\" \n                          className=\"w-full\"\n                          disabled={uploadDocumentMutation.isPending || !selectedFile}\n                        >\n                          {uploadDocumentMutation.isPending ? \"Uploading...\" : \"Upload Document\"}\n                        </Button>\n                      </form>\n                    </Form>\n                  </CardContent>\n                </Card>\n              </div>\n            </div>\n          </TabsContent>\n\n          {/* Release Schedule Tab */}\n          <TabsContent value=\"releases\" className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n              <div className=\"lg:col-span-2\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Scheduled Releases</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-4\">\n                      {documentReleases?.map((release: any) => (\n                        <div key={release.id} className=\"p-4 border rounded-lg\">\n                          <div className=\"flex items-center justify-between mb-2\">\n                            <div className=\"flex items-center gap-2\">\n                              <FileText className=\"h-4 w-4\" />\n                              <span className=\"font-medium\">{release.documentId}</span>\n                            </div>\n                            <Badge \n                              variant={\n                                release.status === 'released' ? 'default' :\n                                release.status === 'pending' ? 'secondary' : 'destructive'\n                              }\n                            >\n                              {release.status}\n                            </Badge>\n                          </div>\n                          <div className=\"text-sm text-gray-500 mb-2\">\n                            Group: {release.groupId} • Type: {release.releaseType}\n                          </div>\n                          {release.scheduledAt && (\n                            <div className=\"text-xs text-gray-400 mb-2\">\n                              Scheduled: {new Date(release.scheduledAt).toLocaleString()}\n                            </div>\n                          )}\n                          {release.notes && (\n                            <div className=\"text-sm text-gray-600 mb-2\">{release.notes}</div>\n                          )}\n                          <div className=\"flex items-center space-x-2\">\n                            {release.status === 'pending' && (\n                              <Button \n                                size=\"sm\" \n                                onClick={() => handleReleaseDocument(release.id)}\n                                disabled={releaseDocumentMutation.isPending}\n                              >\n                                <Play className=\"h-3 w-3 mr-1\" />\n                                Release Now\n                              </Button>\n                            )}\n                            <Button variant=\"ghost\" size=\"sm\">\n                              <Settings className=\"h-3 w-3\" />\n                            </Button>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n\n              <div>\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Schedule New Release</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <Form {...releaseForm}>\n                      <form onSubmit={releaseForm.handleSubmit(onScheduleRelease)} className=\"space-y-4\">\n                        <FormField\n                          control={releaseForm.control}\n                          name=\"documentId\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Document</FormLabel>\n                              <Select onValueChange={field.onChange} defaultValue={field.value}>\n                                <FormControl>\n                                  <SelectTrigger>\n                                    <SelectValue placeholder=\"Select document\" />\n                                  </SelectTrigger>\n                                </FormControl>\n                                <SelectContent>\n                                  {documents?.map((doc: any) => (\n                                    <SelectItem key={doc.id} value={doc.id}>\n                                      {doc.originalName}\n                                    </SelectItem>\n                                  ))}\n                                </SelectContent>\n                              </Select>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <FormField\n                          control={releaseForm.control}\n                          name=\"groupId\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Target Group</FormLabel>\n                              <Select onValueChange={field.onChange} defaultValue={field.value}>\n                                <FormControl>\n                                  <SelectTrigger>\n                                    <SelectValue placeholder=\"Select group\" />\n                                  </SelectTrigger>\n                                </FormControl>\n                                <SelectContent>\n                                  {groups?.map((group: any) => (\n                                    <SelectItem key={group.id} value={group.id}>\n                                      {group.name}\n                                    </SelectItem>\n                                  ))}\n                                </SelectContent>\n                              </Select>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <FormField\n                          control={releaseForm.control}\n                          name=\"releaseType\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Release Type</FormLabel>\n                              <Select onValueChange={field.onChange} defaultValue={field.value}>\n                                <FormControl>\n                                  <SelectTrigger>\n                                    <SelectValue />\n                                  </SelectTrigger>\n                                </FormControl>\n                                <SelectContent>\n                                  <SelectItem value=\"manual\">Manual Release</SelectItem>\n                                  <SelectItem value=\"scheduled\">Scheduled Release</SelectItem>\n                                </SelectContent>\n                              </Select>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <FormField\n                          control={releaseForm.control}\n                          name=\"scheduledAt\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Scheduled Time (if applicable)</FormLabel>\n                              <FormControl>\n                                <Input type=\"datetime-local\" {...field} />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <FormField\n                          control={releaseForm.control}\n                          name=\"notes\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Notes</FormLabel>\n                              <FormControl>\n                                <Input placeholder=\"Optional notes...\" {...field} />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <Button \n                          type=\"submit\" \n                          className=\"w-full\"\n                          disabled={scheduleReleaseMutation.isPending}\n                        >\n                          {scheduleReleaseMutation.isPending ? \"Scheduling...\" : \"Schedule Release\"}\n                        </Button>\n                      </form>\n                    </Form>\n                  </CardContent>\n                </Card>\n              </div>\n            </div>\n          </TabsContent>\n\n          {/* Simulation Timeline Tab */}\n          <TabsContent value=\"timeline\" className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Simulation Weeks</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    {simulationWeeks?.map((week: any) => (\n                      <div key={week.id} className=\"p-4 border rounded-lg\">\n                        <div className=\"flex items-center justify-between mb-2\">\n                          <div className=\"font-medium\">{week.name}</div>\n                          <Badge variant={week.active ? \"default\" : \"secondary\"}>\n                            {week.active ? \"Active\" : \"Inactive\"}\n                          </Badge>\n                        </div>\n                        <div className=\"text-sm text-gray-500 mb-2\">\n                          Week {week.weekNumber} • {new Date(week.startDate).toLocaleDateString()} - {new Date(week.endDate).toLocaleDateString()}\n                        </div>\n                        <div className=\"flex items-center space-x-2\">\n                          <Button size=\"sm\" variant={week.active ? \"secondary\" : \"default\"}>\n                            {week.active ? <Pause className=\"h-3 w-3 mr-1\" /> : <Play className=\"h-3 w-3 mr-1\" />}\n                            {week.active ? \"Deactivate\" : \"Activate\"}\n                          </Button>\n                          <Button variant=\"ghost\" size=\"sm\">\n                            <Settings className=\"h-3 w-3\" />\n                          </Button>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle>Create Simulation Week</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <Form {...weekForm}>\n                    <form onSubmit={weekForm.handleSubmit(onCreateSimulationWeek)} className=\"space-y-4\">\n                      <FormField\n                        control={weekForm.control}\n                        name=\"name\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Week Name</FormLabel>\n                            <FormControl>\n                              <Input placeholder=\"e.g., Cardiology Week\" {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={weekForm.control}\n                        name=\"weekNumber\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Week Number</FormLabel>\n                            <FormControl>\n                              <Input \n                                type=\"number\" \n                                min=\"1\"\n                                {...field} \n                                onChange={(e) => field.onChange(parseInt(e.target.value))}\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={weekForm.control}\n                        name=\"startDate\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Start Date</FormLabel>\n                            <FormControl>\n                              <Input type=\"date\" {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={weekForm.control}\n                        name=\"endDate\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>End Date</FormLabel>\n                            <FormControl>\n                              <Input type=\"date\" {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={weekForm.control}\n                        name=\"sessionId\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Session</FormLabel>\n                            <Select onValueChange={field.onChange} defaultValue={field.value}>\n                              <FormControl>\n                                <SelectTrigger>\n                                  <SelectValue placeholder=\"Select session\" />\n                                </SelectTrigger>\n                              </FormControl>\n                              <SelectContent>\n                                {sessions?.map((session: any) => (\n                                  <SelectItem key={session.id} value={session.id}>\n                                    {session.name}\n                                  </SelectItem>\n                                ))}\n                              </SelectContent>\n                            </Select>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <Button \n                        type=\"submit\" \n                        className=\"w-full\"\n                        disabled={createSimulationWeekMutation.isPending}\n                      >\n                        {createSimulationWeekMutation.isPending ? \"Creating...\" : \"Create Week\"}\n                      </Button>\n                    </form>\n                  </Form>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n\n          {/* Activity Monitor Tab */}\n          <TabsContent value=\"monitoring\" className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-sm\">Documents Released Today</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold text-green-600\">12</div>\n                  <div className=\"text-sm text-gray-500\">+3 from yesterday</div>\n                </CardContent>\n              </Card>\n              \n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-sm\">Pending Releases</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold text-yellow-600\">5</div>\n                  <div className=\"text-sm text-gray-500\">2 scheduled for today</div>\n                </CardContent>\n              </Card>\n              \n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-sm\">Active Groups</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold text-blue-600\">8</div>\n                  <div className=\"text-sm text-gray-500\">In current session</div>\n                </CardContent>\n              </Card>\n            </div>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>Recent Activity</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {[\n                    { action: \"Released lab results to Group A\", time: \"10 minutes ago\", type: \"release\" },\n                    { action: \"Uploaded chest X-ray for Patient 002\", time: \"25 minutes ago\", type: \"upload\" },\n                    { action: \"Scheduled imaging report for Group B\", time: \"1 hour ago\", type: \"schedule\" },\n                    { action: \"Activated Simulation Week 3\", time: \"2 hours ago\", type: \"timeline\" },\n                  ].map((activity, index) => (\n                    <div key={index} className=\"flex items-center justify-between p-3 border rounded-lg\">\n                      <div className=\"flex items-center gap-3\">\n                        <div className={`w-8 h-8 rounded-full flex items-center justify-center ${\n                          activity.type === 'release' ? 'bg-green-100' :\n                          activity.type === 'upload' ? 'bg-blue-100' :\n                          activity.type === 'schedule' ? 'bg-yellow-100' : 'bg-purple-100'\n                        }`}>\n                          {activity.type === 'release' && <CheckCircle className=\"h-4 w-4 text-green-600\" />}\n                          {activity.type === 'upload' && <Upload className=\"h-4 w-4 text-blue-600\" />}\n                          {activity.type === 'schedule' && <Calendar className=\"h-4 w-4 text-yellow-600\" />}\n                          {activity.type === 'timeline' && <Clock className=\"h-4 w-4 text-purple-600\" />}\n                        </div>\n                        <div>\n                          <div className=\"font-medium\">{activity.action}</div>\n                        </div>\n                      </div>\n                      <div className=\"text-sm text-gray-500\">{activity.time}</div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}","size_bytes":35507},"client/src/pages/group-manager.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from \"@/components/ui/alert-dialog\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { FileText, Image, FileIcon, Eye, EyeOff, Users, AlertTriangle } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { Group, Asset, AssetGroupVisibility } from \"@shared/schema\";\n\nconst sessionId = \"session-1\"; // Using test session\n\nexport default function GroupManager() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [selectedAssets, setSelectedAssets] = useState<string[]>([]);\n  const [selectedGroup, setSelectedGroup] = useState<string>(\"\");\n  const [bulkAction, setBulkAction] = useState<\"show\" | \"hide\" | null>(null);\n\n  // Fetch groups for the session\n  const { data: groups = [], isLoading: groupsLoading } = useQuery<Group[]>({\n    queryKey: [\"/api/sessions\", sessionId, \"groups\"],\n  });\n\n  // Fetch assets for the session\n  const { data: assets = [], isLoading: assetsLoading } = useQuery<Asset[]>({\n    queryKey: [\"/api/sessions\", sessionId, \"assets\"],\n  });\n\n  // Fetch visibility for each group-asset combination\n  const getAssetVisibilityForGroup = (assetId: string, groupId: string) => {\n    return useQuery<AssetGroupVisibility | null>({\n      queryKey: [\"/api/assets\", assetId, \"visibility\", groupId],\n      enabled: !!assetId && !!groupId,\n    });\n  };\n\n  // Update asset visibility mutation\n  const updateVisibilityMutation = useMutation({\n    mutationFn: async ({ assetId, groupId, visible }: { assetId: string; groupId: string; visible: boolean }) => {\n      const response = await fetch(`/api/assets/${assetId}/visibility/${groupId}`, {\n        method: \"PUT\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ visible, changedBy: user?.id }),\n      });\n      if (!response.ok) throw new Error(\"Failed to update visibility\");\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/assets\"] });\n      toast({\n        title: \"Success\",\n        description: \"Document visibility updated successfully\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update document visibility\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Bulk update visibility mutation\n  const bulkUpdateMutation = useMutation({\n    mutationFn: async ({ assetIds, groupId, visible }: { assetIds: string[]; groupId: string; visible: boolean }) => {\n      const response = await fetch(`/api/assets/bulk-visibility/${groupId}`, {\n        method: \"PUT\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ assetIds, visible, changedBy: user?.id }),\n      });\n      if (!response.ok) throw new Error(\"Failed to bulk update visibility\");\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/assets\"] });\n      setSelectedAssets([]);\n      setBulkAction(null);\n      toast({\n        title: \"Success\",\n        description: \"Document visibility updated for all selected items\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update document visibility\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const getAssetIcon = (type: string) => {\n    switch (type) {\n      case \"pdf\":\n      case \"document\":\n        return <FileText className=\"h-4 w-4\" />;\n      case \"image\":\n        return <Image className=\"h-4 w-4\" />;\n      case \"lab\":\n        return <FileIcon className=\"h-4 w-4\" />;\n      default:\n        return <FileIcon className=\"h-4 w-4\" />;\n    }\n  };\n\n  const handleAssetSelection = (assetId: string, checked: boolean) => {\n    if (checked) {\n      setSelectedAssets(prev => [...prev, assetId]);\n    } else {\n      setSelectedAssets(prev => prev.filter(id => id !== assetId));\n    }\n  };\n\n  const handleBulkAction = () => {\n    if (!selectedGroup || !bulkAction || selectedAssets.length === 0) return;\n    \n    bulkUpdateMutation.mutate({\n      assetIds: selectedAssets,\n      groupId: selectedGroup,\n      visible: bulkAction === \"show\",\n    });\n  };\n\n  const AssetVisibilityRow = ({ asset, group }: { asset: Asset; group: Group }) => {\n    const { data: visibility } = getAssetVisibilityForGroup(asset.id, group.id);\n    const isVisible = visibility?.visible || false;\n\n    return (\n      <div className=\"flex items-center justify-between p-3 border rounded-lg\">\n        <div className=\"flex items-center space-x-3\">\n          <Checkbox\n            checked={selectedAssets.includes(asset.id)}\n            onCheckedChange={(checked) => handleAssetSelection(asset.id, checked as boolean)}\n          />\n          {getAssetIcon(asset.type)}\n          <div>\n            <p className=\"font-medium\">{asset.filename}</p>\n            <p className=\"text-sm text-muted-foreground capitalize\">{asset.type}</p>\n          </div>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <Badge variant={isVisible ? \"default\" : \"secondary\"}>\n            {isVisible ? (\n              <>\n                <Eye className=\"h-3 w-3 mr-1\" />\n                Visible\n              </>\n            ) : (\n              <>\n                <EyeOff className=\"h-3 w-3 mr-1\" />\n                Hidden\n              </>\n            )}\n          </Badge>\n          <AlertDialog>\n            <AlertDialogTrigger asChild>\n              <Button variant=\"outline\" size=\"sm\">\n                {isVisible ? \"Hide\" : \"Show\"}\n              </Button>\n            </AlertDialogTrigger>\n            <AlertDialogContent>\n              <AlertDialogHeader>\n                <AlertDialogTitle className=\"flex items-center gap-2\">\n                  <AlertTriangle className=\"h-5 w-5 text-amber-500\" />\n                  Confirm Document Visibility Change\n                </AlertDialogTitle>\n                <AlertDialogDescription>\n                  Are you sure you want to {isVisible ? \"hide\" : \"show\"} \"{asset.filename}\" for group \"{group.name}\"?\n                  <br />\n                  <span className=\"text-amber-600 font-medium mt-2 block\">\n                    ⚠️ This action will immediately affect what students in this group can see.\n                  </span>\n                </AlertDialogDescription>\n              </AlertDialogHeader>\n              <AlertDialogFooter>\n                <AlertDialogCancel>Cancel</AlertDialogCancel>\n                <AlertDialogAction\n                  onClick={() => updateVisibilityMutation.mutate({\n                    assetId: asset.id,\n                    groupId: group.id,\n                    visible: !isVisible,\n                  })}\n                  className={isVisible ? \"bg-red-600 hover:bg-red-700\" : \"bg-green-600 hover:bg-green-700\"}\n                >\n                  {isVisible ? \"Hide Document\" : \"Show Document\"}\n                </AlertDialogAction>\n              </AlertDialogFooter>\n            </AlertDialogContent>\n          </AlertDialog>\n        </div>\n      </div>\n    );\n  };\n\n  if (groupsLoading || assetsLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-[#005EB8] mx-auto mb-2\"></div>\n          <p>Loading groups and documents...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      <div className=\"border-b border-gray-200 pb-4\">\n        <h1 className=\"text-2xl font-bold text-[#005EB8]\">Group Manager</h1>\n        <p className=\"text-gray-600 mt-1\">\n          Control document visibility for different student groups with safety confirmations and audit trails.\n        </p>\n      </div>\n\n      {/* Bulk Actions */}\n      {selectedAssets.length > 0 && (\n        <Card className=\"border-amber-200 bg-amber-50\">\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-amber-800 flex items-center gap-2\">\n              <AlertTriangle className=\"h-5 w-5\" />\n              Bulk Actions ({selectedAssets.length} documents selected)\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"flex items-center gap-4\">\n              <select\n                value={selectedGroup}\n                onChange={(e) => setSelectedGroup(e.target.value)}\n                className=\"px-3 py-2 border rounded-md\"\n              >\n                <option value=\"\">Select Group</option>\n                {groups.map((group) => (\n                  <option key={group.id} value={group.id}>\n                    {group.name}\n                  </option>\n                ))}\n              </select>\n              <AlertDialog>\n                <AlertDialogTrigger asChild>\n                  <Button\n                    variant=\"outline\"\n                    disabled={!selectedGroup}\n                    onClick={() => setBulkAction(\"show\")}\n                  >\n                    Show Selected\n                  </Button>\n                </AlertDialogTrigger>\n                <AlertDialogContent>\n                  <AlertDialogHeader>\n                    <AlertDialogTitle className=\"flex items-center gap-2\">\n                      <AlertTriangle className=\"h-5 w-5 text-amber-500\" />\n                      Confirm Bulk Show Documents\n                    </AlertDialogTitle>\n                    <AlertDialogDescription>\n                      Are you sure you want to show {selectedAssets.length} documents to group \"{groups.find(g => g.id === selectedGroup)?.name}\"?\n                      <br />\n                      <span className=\"text-amber-600 font-medium mt-2 block\">\n                        ⚠️ This action will immediately make these documents visible to all students in this group.\n                      </span>\n                    </AlertDialogDescription>\n                  </AlertDialogHeader>\n                  <AlertDialogFooter>\n                    <AlertDialogCancel>Cancel</AlertDialogCancel>\n                    <AlertDialogAction\n                      onClick={handleBulkAction}\n                      className=\"bg-green-600 hover:bg-green-700\"\n                    >\n                      Show Documents\n                    </AlertDialogAction>\n                  </AlertDialogFooter>\n                </AlertDialogContent>\n              </AlertDialog>\n              \n              <AlertDialog>\n                <AlertDialogTrigger asChild>\n                  <Button\n                    variant=\"outline\"\n                    disabled={!selectedGroup}\n                    onClick={() => setBulkAction(\"hide\")}\n                  >\n                    Hide Selected\n                  </Button>\n                </AlertDialogTrigger>\n                <AlertDialogContent>\n                  <AlertDialogHeader>\n                    <AlertDialogTitle className=\"flex items-center gap-2\">\n                      <AlertTriangle className=\"h-5 w-5 text-amber-500\" />\n                      Confirm Bulk Hide Documents\n                    </AlertDialogTitle>\n                    <AlertDialogDescription>\n                      Are you sure you want to hide {selectedAssets.length} documents from group \"{groups.find(g => g.id === selectedGroup)?.name}\"?\n                      <br />\n                      <span className=\"text-amber-600 font-medium mt-2 block\">\n                        ⚠️ This action will immediately hide these documents from all students in this group.\n                      </span>\n                    </AlertDialogDescription>\n                  </AlertDialogHeader>\n                  <AlertDialogFooter>\n                    <AlertDialogCancel>Cancel</AlertDialogCancel>\n                    <AlertDialogAction\n                      onClick={handleBulkAction}\n                      className=\"bg-red-600 hover:bg-red-700\"\n                    >\n                      Hide Documents\n                    </AlertDialogAction>\n                  </AlertDialogFooter>\n                </AlertDialogContent>\n              </AlertDialog>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Group Tabs */}\n      <Tabs defaultValue={groups[0]?.id} className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-auto\">\n          {groups.map((group) => (\n            <TabsTrigger key={group.id} value={group.id} className=\"flex items-center gap-2\">\n              <Users className=\"h-4 w-4\" />\n              {group.name}\n            </TabsTrigger>\n          ))}\n        </TabsList>\n\n        {groups.map((group) => (\n          <TabsContent key={group.id} value={group.id}>\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Users className=\"h-5 w-5\" />\n                  {group.name}\n                </CardTitle>\n                <CardDescription>{group.description}</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  {assets.length === 0 ? (\n                    <p className=\"text-center text-gray-500 py-8\">No documents available</p>\n                  ) : (\n                    assets.map((asset) => (\n                      <AssetVisibilityRow key={asset.id} asset={asset} group={group} />\n                    ))\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        ))}\n      </Tabs>\n    </div>\n  );\n}","size_bytes":14168},"client/src/pages/instructor-dashboard.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport TopNavigation from \"@/components/top-navigation\";\nimport PatientList from \"@/components/patient-list\";\nimport PatientHeader from \"@/components/patient-header\";\nimport PatientOverview from \"@/components/patient-overview\";\nimport InstructorControls from \"@/components/instructor-controls\";\nimport NotificationToast from \"@/components/notification-toast\";\nimport type { Patient, Session } from \"@shared/schema\";\n\nexport default function InstructorDashboard() {\n  const { user } = useAuth();\n  const [selectedPatientId, setSelectedPatientId] = useState<string | undefined>();\n  const [currentMode, setCurrentMode] = useState<\"student\" | \"instructor\">(\"instructor\");\n  const [showInstructorControls, setShowInstructorControls] = useState(true);\n  const [notifications, setNotifications] = useState<Array<{\n    id: string;\n    type: \"success\" | \"warning\" | \"error\";\n    message: string;\n  }>>([]);\n\n  // For demo purposes, using a hardcoded session ID\n  const sessionId = \"session-1\";\n\n  const { data: session } = useQuery<Session>({\n    queryKey: [\"/api/sessions\", sessionId],\n  });\n\n  const { data: patients = [] } = useQuery<Patient[]>({\n    queryKey: [\"/api/sessions\", sessionId, \"patients\"],\n  });\n\n  const { data: selectedPatient } = useQuery<Patient>({\n    queryKey: [\"/api/patients\", selectedPatientId],\n    enabled: !!selectedPatientId,\n  });\n\n  // Auto-select first patient if none selected\n  useState(() => {\n    if (patients.length > 0 && !selectedPatientId) {\n      setSelectedPatientId(patients[0].id);\n    }\n  });\n\n  const handlePatientSelect = (patientId: string) => {\n    setSelectedPatientId(patientId);\n  };\n\n  const dismissNotification = (id: string) => {\n    setNotifications(prev => prev.filter(n => n.id !== id));\n  };\n\n  if (!selectedPatient) {\n    return (\n      <div className=\"h-screen flex flex-col\">\n        <TopNavigation\n          currentMode={currentMode}\n          onModeChange={setCurrentMode}\n          sessionName={session?.name}\n          timeRemaining={session?.timeRemaining ? `${session.timeRemaining}:00` : undefined}\n        />\n        <div className=\"flex flex-1\">\n          <PatientList\n            patients={patients}\n            selectedPatientId={selectedPatientId}\n            onPatientSelect={handlePatientSelect}\n          />\n          <div className=\"flex-1 flex items-center justify-center bg-bg-light\">\n            <p className=\"text-gray-500\">Select a patient to view their records</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"h-screen flex flex-col\">\n      <TopNavigation\n        currentMode={currentMode}\n        onModeChange={setCurrentMode}\n        sessionName={session?.name}\n        timeRemaining={session?.timeRemaining ? `${session.timeRemaining}:00` : undefined}\n      />\n      \n      <div className=\"flex flex-1 overflow-hidden\">\n        <PatientList\n          patients={patients}\n          selectedPatientId={selectedPatientId}\n          onPatientSelect={handlePatientSelect}\n        />\n        \n        <main className=\"flex-1 flex flex-col overflow-hidden\">\n          <PatientHeader patient={selectedPatient} />\n          <PatientOverview patient={selectedPatient} />\n        </main>\n      </div>\n      \n      {currentMode === \"instructor\" && (\n        <InstructorControls\n          patientId={selectedPatient.id}\n          isVisible={showInstructorControls}\n          onClose={() => setShowInstructorControls(false)}\n        />\n      )}\n      \n      <NotificationToast\n        notifications={notifications}\n        onDismiss={dismissNotification}\n      />\n    </div>\n  );\n}\n","size_bytes":3718},"client/src/pages/login.tsx":{"content":"import { useState } from \"react\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { AlertCircle, Hospital } from \"lucide-react\";\n\nexport default function LoginPage() {\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const { login } = useAuth();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setError(\"\");\n    setIsLoading(true);\n\n    const success = await login(username, password);\n    if (!success) {\n      setError(\"Invalid username or password\");\n    }\n    setIsLoading(false);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-bg-light flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"text-center\">\n          <div className=\"flex items-center justify-center mb-4\">\n            <Hospital className=\"h-8 w-8 text-hospital-blue mr-2\" />\n            <h1 className=\"text-2xl font-semibold text-gray-900\">Digital Medical Records</h1>\n          </div>\n          <CardTitle>Simulation Platform</CardTitle>\n          <CardDescription>\n            Sign in to access the medical education simulator\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"username\">Username</Label>\n              <Input\n                id=\"username\"\n                type=\"text\"\n                value={username}\n                onChange={(e) => setUsername(e.target.value)}\n                required\n                placeholder=\"Enter your username\"\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"password\">Password</Label>\n              <Input\n                id=\"password\"\n                type=\"password\"\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n                required\n                placeholder=\"Enter your password\"\n              />\n            </div>\n            {error && (\n              <div className=\"flex items-center space-x-2 text-critical-red text-sm\">\n                <AlertCircle className=\"h-4 w-4\" />\n                <span>{error}</span>\n              </div>\n            )}\n            <Button \n              type=\"submit\" \n              className=\"w-full bg-hospital-blue hover:bg-hospital-blue/90\"\n              disabled={isLoading}\n            >\n              {isLoading ? \"Signing in...\" : \"Sign In\"}\n            </Button>\n          </form>\n          <div className=\"mt-6 text-center text-sm text-gray-600\">\n            <p>Test Credentials:</p>\n            <p>Instructor: username \"instructor\", password \"password\"</p>\n            <p>Student: username \"student\", password \"password\"</p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":3213},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/student-dashboard.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport TopNavigation from \"@/components/top-navigation\";\nimport PatientList from \"@/components/patient-list\";\nimport PatientHeader from \"@/components/patient-header\";\nimport PatientOverview from \"@/components/patient-overview\";\nimport SoapNotesForm from \"@/components/soap-notes-form\";\nimport OrdersForm from \"@/components/orders-form\";\nimport NotificationToast from \"@/components/notification-toast\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport type { Patient, Session } from \"@shared/schema\";\n\nexport default function StudentDashboard() {\n  const { user } = useAuth();\n  const [selectedPatientId, setSelectedPatientId] = useState<string | undefined>();\n  const [currentMode, setCurrentMode] = useState<\"student\" | \"instructor\">(\"student\");\n  const [notifications, setNotifications] = useState<Array<{\n    id: string;\n    type: \"success\" | \"warning\" | \"error\";\n    message: string;\n  }>>([]);\n\n  // For demo purposes, using a hardcoded session ID\n  const sessionId = \"session-1\";\n\n  const { data: session } = useQuery<Session>({\n    queryKey: [\"/api/sessions\", sessionId],\n  });\n\n  const { data: patients = [] } = useQuery<Patient[]>({\n    queryKey: [\"/api/sessions\", sessionId, \"patients\"],\n  });\n\n  const { data: selectedPatient } = useQuery<Patient>({\n    queryKey: [\"/api/patients\", selectedPatientId],\n    enabled: !!selectedPatientId,\n  });\n\n  // Auto-select first patient if none selected\n  useState(() => {\n    if (patients.length > 0 && !selectedPatientId) {\n      setSelectedPatientId(patients[0].id);\n    }\n  });\n\n  const handlePatientSelect = (patientId: string) => {\n    setSelectedPatientId(patientId);\n  };\n\n  const dismissNotification = (id: string) => {\n    setNotifications(prev => prev.filter(n => n.id !== id));\n  };\n\n  if (!selectedPatient) {\n    return (\n      <div className=\"h-screen flex flex-col\">\n        <TopNavigation\n          currentMode={currentMode}\n          onModeChange={setCurrentMode}\n          sessionName={session?.name}\n          timeRemaining={session?.timeRemaining ? `${session.timeRemaining}:00` : undefined}\n        />\n        <div className=\"flex flex-1\">\n          <PatientList\n            patients={patients}\n            selectedPatientId={selectedPatientId}\n            onPatientSelect={handlePatientSelect}\n          />\n          <div className=\"flex-1 flex items-center justify-center bg-bg-light\">\n            <p className=\"text-gray-500\">Select a patient to view their records</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"h-screen flex flex-col\">\n      <TopNavigation\n        currentMode={currentMode}\n        onModeChange={setCurrentMode}\n        sessionName={session?.name}\n        timeRemaining={session?.timeRemaining ? `${session.timeRemaining}:00` : undefined}\n      />\n      \n      <div className=\"flex flex-1 overflow-hidden\">\n        <PatientList\n          patients={patients}\n          selectedPatientId={selectedPatientId}\n          onPatientSelect={handlePatientSelect}\n        />\n        \n        <main className=\"flex-1 flex flex-col overflow-hidden\">\n          <PatientHeader patient={selectedPatient} />\n          \n          <Tabs defaultValue=\"overview\" className=\"flex-1 flex flex-col\">\n            <div className=\"bg-white border-b border-gray-200\">\n              <TabsList className=\"h-auto p-0 bg-transparent\">\n                <div className=\"flex space-x-8 px-6\">\n                  <TabsTrigger\n                    value=\"overview\"\n                    className=\"border-b-2 border-transparent data-[state=active]:border-hospital-blue data-[state=active]:text-hospital-blue py-3 px-1 rounded-none bg-transparent\"\n                  >\n                    Overview\n                  </TabsTrigger>\n                  <TabsTrigger\n                    value=\"assessment\"\n                    className=\"border-b-2 border-transparent data-[state=active]:border-hospital-blue data-[state=active]:text-hospital-blue py-3 px-1 rounded-none bg-transparent\"\n                  >\n                    Assessment & Orders\n                  </TabsTrigger>\n                </div>\n              </TabsList>\n            </div>\n            \n            <TabsContent value=\"overview\" className=\"flex-1 overflow-auto m-0\">\n              <PatientOverview patient={selectedPatient} />\n            </TabsContent>\n            \n            <TabsContent value=\"assessment\" className=\"flex-1 overflow-auto m-0\">\n              <div className=\"bg-bg-light p-6\">\n                <div className=\"max-w-7xl mx-auto\">\n                  <div className=\"bg-white rounded-lg shadow-sm border border-gray-200 p-6\">\n                    <h2 className=\"text-lg font-semibold text-gray-900 mb-6\">\n                      Patient Assessment & Orders\n                    </h2>\n                    \n                    <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n                      <SoapNotesForm patientId={selectedPatient.id} />\n                      <OrdersForm patientId={selectedPatient.id} />\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </TabsContent>\n          </Tabs>\n        </main>\n      </div>\n      \n      <NotificationToast\n        notifications={notifications}\n        onDismiss={dismissNotification}\n      />\n    </div>\n  );\n}\n","size_bytes":5466},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"server/groupMiddleware.ts":{"content":"import { Request, Response, NextFunction } from \"express\";\nimport { storage } from \"./storage\";\n\n// 扩展 Request 接口以包含用户组信息\ndeclare global {\n  namespace Express {\n    interface Request {\n      userGroups?: string[];\n      activeGroupId?: string;\n    }\n  }\n}\n\n/**\n * 组级别权限验证中间件\n * 确保用户只能访问其所属组的数据\n */\nexport async function groupAccessMiddleware(req: Request, res: Response, next: NextFunction) {\n  try {\n    // 从会话中获取用户信息\n    const userId = req.session?.user?.id;\n    \n    if (!userId) {\n      return res.status(401).json({ message: \"未授权：用户未登录\" });\n    }\n\n    // 获取用户所属的所有组\n    const userGroups = await storage.getUserGroups(userId);\n    req.userGroups = userGroups.map(g => g.id);\n    \n    // 如果请求包含组ID，验证用户是否属于该组\n    const requestedGroupId = req.params.groupId || req.query.groupId as string;\n    if (requestedGroupId) {\n      if (!req.userGroups.includes(requestedGroupId)) {\n        return res.status(403).json({ \n          message: \"禁止访问：您不属于请求的组\" \n        });\n      }\n      req.activeGroupId = requestedGroupId;\n    } else if (req.userGroups.length > 0) {\n      // 如果未指定组ID，使用用户的第一个组作为默认组\n      req.activeGroupId = req.userGroups[0];\n    }\n\n    next();\n  } catch (error) {\n    console.error(\"组权限验证错误:\", error);\n    res.status(500).json({ message: \"服务器内部错误\" });\n  }\n}\n\n/**\n * 患者数据访问控制\n * 确保用户只能访问其组分配的患者数据\n */\nexport async function patientAccessMiddleware(req: Request, res: Response, next: NextFunction) {\n  try {\n    const patientId = req.params.patientId;\n    const userGroupId = req.activeGroupId;\n    \n    if (!patientId || !userGroupId) {\n      return next();\n    }\n\n    // 检查该组是否有权访问此患者数据\n    const groupAssignments = await storage.getGroupDataAssignments(userGroupId);\n    const hasAccess = groupAssignments.some(assignment => \n      assignment.patientId === patientId\n    );\n\n    if (!hasAccess) {\n      return res.status(403).json({ \n        message: \"禁止访问：您的组无权访问此患者数据\" \n      });\n    }\n\n    next();\n  } catch (error) {\n    console.error(\"患者数据访问控制错误:\", error);\n    res.status(500).json({ message: \"服务器内部错误\" });\n  }\n}\n\n/**\n * SOAP笔记和医嘱数据隔离\n * 确保用户只能看到自己组内创建的笔记和医嘱\n */\nexport async function groupDataIsolationMiddleware(req: Request, res: Response, next: NextFunction) {\n  try {\n    // 在请求中添加组过滤信息\n    req.groupFilter = {\n      userGroups: req.userGroups || [],\n      activeGroupId: req.activeGroupId\n    };\n    \n    next();\n  } catch (error) {\n    console.error(\"组数据隔离错误:\", error);\n    res.status(500).json({ message: \"服务器内部错误\" });\n  }\n}\n\n// 扩展 Request 接口\ndeclare global {\n  namespace Express {\n    interface Request {\n      groupFilter?: {\n        userGroups: string[];\n        activeGroupId?: string;\n      };\n    }\n  }\n}","size_bytes":3163}}}
@startuml MediSimv1-MVP-Architecture
!theme plain
skinparam backgroundColor #FFFFFF
skinparam componentStyle rectangle

title MediSimv1 MVP 架构图 - 数字医疗记录仿真平台

' 定义样式
skinparam component {
    BackgroundColor #E3F2FD
    BorderColor #1976D2
    FontColor #0D47A1
}

skinparam database {
    BackgroundColor #F3E5F5
    BorderColor #7B1FA2
    FontColor #4A148C
}

skinparam actor {
    BackgroundColor #E8F5E8
    BorderColor #388E3C
    FontColor #1B5E20
}

' 用户角色
actor "系统管理员\n(Admin)" as Admin
actor "仿真协调员\n(Coordinator)" as Coordinator
actor "教师\n(Instructor)" as Instructor
actor "学生\n(Student)" as Student

' 前端组件
package "前端应用 (React + TypeScript)" {
    component "主应用\n(App.tsx)" as App
    component "认证系统\n(AuthProvider)" as Auth
    component "路由系统\n(Wouter)" as Router
    
    package "页面组件" {
        component "管理员仪表板\n(AdminDashboard)" as AdminDash
        component "协调员仪表板\n(CoordinatorDashboard)" as CoordDash
        component "教师仪表板\n(InstructorDashboard)" as InstructorDash
        component "学生仪表板\n(StudentDashboard)" as StudentDash
        component "组管理器\n(GroupManager)" as GroupMgr
    }
    
    package "共享组件" {
        component "患者列表\n(PatientList)" as PatientList
        component "患者概览\n(PatientOverview)" as PatientOverview
        component "SOAP笔记表单\n(SOAPNotesForm)" as SOAPForm
        component "医嘱表单\n(OrdersForm)" as OrdersForm
        component "通知系统\n(NotificationToast)" as Notification
        component "顶部导航\n(TopNavigation)" as TopNav
    }
    
    package "UI组件库" {
        component "shadcn/ui\n组件库" as UIComponents
        component "Tailwind CSS\n样式系统" as Tailwind
    }
}

' 后端服务
package "后端服务 (Node.js + Express)" {
    component "主服务器\n(server/index.ts)" as MainServer
    component "路由注册\n(routes.ts)" as Routes
    
    package "API端点" {
        component "认证API\n(/api/auth)" as AuthAPI
        component "用户管理API\n(/api/admin/users)" as UserAPI
        component "患者API\n(/api/patients)" as PatientAPI
        component "SOAP笔记API\n(/api/soap-notes)" as SOAPAPI
        component "医嘱API\n(/api/orders)" as OrdersAPI
        component "组管理API\n(/api/groups)" as GroupAPI
        component "文档管理API\n(/api/documents)" as DocAPI
    }
    
    package "中间件" {
        component "认证中间件\n(authenticateToken)" as AuthMiddleware
        component "权限中间件\n(requireRole)" as RoleMiddleware
        component "组访问中间件\n(groupAccessMiddleware)" as GroupMiddleware
        component "患者访问中间件\n(patientAccessMiddleware)" as PatientMiddleware
        component "数据隔离中间件\n(groupDataIsolationMiddleware)" as IsolationMiddleware
    }
    
    package "业务逻辑" {
        component "用户服务\n(UserService)" as UserService
        component "患者服务\n(PatientService)" as PatientService
        component "组服务\n(GroupService)" as GroupService
        component "文档服务\n(DocumentService)" as DocService
        component "审计服务\n(AuditService)" as AuditService
    }
}

' 数据库层
package "数据库层 (PostgreSQL + Drizzle ORM)" {
    database "PostgreSQL\n主数据库" as MainDB
    
    package "核心表结构" {
        database "用户表\n(users)" as UsersTable
        database "会话表\n(sessions)" as SessionsTable
        database "患者表\n(patients)" as PatientsTable
        database "生命体征表\n(vital_signs)" as VitalsTable
        database "实验室结果表\n(lab_results)" as LabTable
        database "SOAP笔记表\n(soap_notes)" as SOAPTable
        database "医嘱表\n(orders)" as OrdersTable
        database "组表\n(groups)" as GroupsTable
        database "组数据分配表\n(group_data_assignments)" as GroupDataTable
        database "数据版本表\n(data_versions)" as VersionsTable
        database "文档表\n(documents)" as DocumentsTable
        database "审计日志表\n(audit_logs)" as AuditTable
    }
}

' 外部服务
package "外部服务" {
    component "Google Cloud Storage\n(文件存储)" as GCS
    component "Neon Database\n(云数据库)" as NeonDB
}

' 安全层
package "安全架构" {
    component "HTTPS/TLS\n加密传输" as HTTPS
    component "JWT + Session\n双重认证" as JWT
    component "RBAC权限\n控制系统" as RBAC
    component "数据加密\n(AES-256)" as Encryption
    component "审计日志\n系统" as AuditLog
}

' 连接关系 - 用户到前端
Admin --> App : 访问
Coordinator --> App : 访问
Instructor --> App : 访问
Student --> App : 访问

' 前端内部连接
App --> Auth : 认证状态管理
App --> Router : 路由控制
Router --> AdminDash : 管理员路由
Router --> CoordDash : 协调员路由
Router --> InstructorDash : 教师路由
Router --> StudentDash : 学生路由
Router --> GroupMgr : 组管理路由

' 页面组件到共享组件
AdminDash --> PatientList : 患者管理
AdminDash --> GroupMgr : 组管理
CoordDash --> DocAPI : 文档管理
InstructorDash --> PatientOverview : 患者监控
InstructorDash --> SOAPForm : 临床记录
StudentDash --> PatientOverview : 患者查看
StudentDash --> SOAPForm : 记录编写

' 前端到后端
PatientList --> PatientAPI : 获取患者列表
PatientOverview --> PatientAPI : 获取患者详情
SOAPForm --> SOAPAPI : 提交SOAP笔记
OrdersForm --> OrdersAPI : 提交医嘱
GroupMgr --> GroupAPI : 组管理操作

' 后端内部连接
MainServer --> Routes : 路由注册
Routes --> AuthAPI : 认证路由
Routes --> UserAPI : 用户管理路由
Routes --> PatientAPI : 患者管理路由
Routes --> SOAPAPI : SOAP笔记路由
Routes --> OrdersAPI : 医嘱路由
Routes --> GroupAPI : 组管理路由

' API到中间件
AuthAPI --> AuthMiddleware : 认证验证
UserAPI --> RoleMiddleware : 角色验证
PatientAPI --> GroupMiddleware : 组权限验证
PatientAPI --> PatientMiddleware : 患者访问验证
SOAPAPI --> IsolationMiddleware : 数据隔离

' 中间件到业务逻辑
AuthMiddleware --> UserService : 用户验证
RoleMiddleware --> UserService : 权限检查
GroupMiddleware --> GroupService : 组权限检查
PatientMiddleware --> PatientService : 患者访问检查

' 业务逻辑到数据库
UserService --> UsersTable : 用户CRUD
PatientService --> PatientsTable : 患者CRUD
PatientService --> VitalsTable : 生命体征
PatientService --> LabTable : 实验室结果
GroupService --> GroupsTable : 组管理
GroupService --> GroupDataTable : 数据分配
DocService --> DocumentsTable : 文档管理
AuditService --> AuditTable : 审计记录

' 数据库连接
MainDB --> UsersTable : 包含
MainDB --> PatientsTable : 包含
MainDB --> GroupsTable : 包含
MainDB --> AuditTable : 包含

' 外部服务连接
GCS --> DocumentsTable : 文件存储
NeonDB --> MainDB : 数据库托管

' 安全层连接
HTTPS --> MainServer : 保护传输
JWT --> AuthMiddleware : 认证机制
RBAC --> RoleMiddleware : 权限控制
Encryption --> MainDB : 数据加密
AuditLog --> AuditService : 审计追踪

' 数据流标注
note right of PatientAPI
  数据流:
  1. 验证用户权限
  2. 检查组访问权限
  3. 应用数据隔离
  4. 返回过滤后数据
end note

note right of GroupDataTable
  数据隔离核心:
  - 组级数据分配
  - 患者访问控制
  - 权限边界管理
end note

note right of AuditTable
  审计追踪:
  - 用户操作记录
  - 数据访问日志
  - 权限变更历史
  - 安全事件记录
end note

' MVP特性标注
note top of App
  MVP核心功能:
  ✅ 四角色权限系统
  ✅ 患者数据管理
  ✅ SOAP笔记系统
  ✅ 医嘱管理系统
  ✅ 组级数据隔离
  ✅ 基础安全防护
end note

note bottom of MainServer
  MVP技术特点:
  ✅ 全栈TypeScript
  ✅ React 18 + Node.js
  ✅ PostgreSQL + Drizzle
  ✅ 多层安全架构
  ✅ 实时数据同步
end note

@enduml
